{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IronOS - Flexible Soldering iron control Firmware The firmware implements all of the standard features of a 'smart' soldering iron, with lots of little extras and tweaks. I highly recommend reading the installation guide fully when installing on your iron. And after install just explore the settings menu. For soldering irons that are designed to be powered by 'smart' power sources (PD and QC), the firmware supports settings around the negotiated power and voltage. For soldering irons that are designed to be powered by batteries (TS100 & Pinecil), settings for a cutoff voltage for battery protection are supported. Currently 31 languages are supported. When downloading the firmware for your soldering iron, take note of the language code in the file name. This project is considered feature complete for use as a soldering iron, so please suggest any feature improvements you would like! This firmware does NOT support the USB port while running for changing settings. This is done through the onscreen menu only. Logos are edited on a computer and flashed like firmware. Device DC QC PD EPR BLE Battery Recommended MHP30 \u274c \u274c \u2714\ufe0f \u274c \u274c \u274c \u2714\ufe0f Pinecil V1 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u274c \u2714\ufe0f \u2714\ufe0f Pinecil V2 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f TS80P \u274c \u2714\ufe0f \u2714\ufe0f \u274c \u274c \u2714\ufe0f \u2714\ufe0f TS100 \u2714\ufe0f \u274c \u274c \u274c \u274c \u2714\ufe0f \u274c TS80 \u274c \u2714\ufe0f \u274c \u274c \u274c \u2714\ufe0f \u274c *Please note that Miniware started shipping TS100's using cloned STM32 Chips. While these do work with IronOS, their DFU bootloader works terribly, and it is hard to get it to successfully flash larger firmware images like IronOS without timing out. This is the main reason why the TS100 is no longer recommended . Getting Started To get started with IronOS firmware, please jump to Getting Started Guide . But the TL;DR is to press the button near the front of the iron to heat up. Use the button near the back of the iron to enter the settings menu. Long hold the rear button in soldering mode to exit back to the start screen. Installation For notes on installation for your device, please refer to the flashing guide for your device: MHP30 Pinecil V1 Pinecil V2 TS80 / TS80P TS100 Key Features PID style iron temperature control Automatic sleep with selectable sensitivity Motion wake support All settings exposed in the intuitive menu (TS100) Set a voltage lower limit for Lithium batteries so you don't kill your battery pack (TS80) Set 18 W or 24 W settings for your power bank (TS80P) Automatically negotiates appropriate PD and falls back to QC mode like TS80 (Pinecil) Supports all 3 power modes (PD, QC, DC In). (Pinecilv2) Supports USB-PD EPR for 28V operation. Improved readability Fonts, supporting multiple languages Use hardware features to improve reliability Can disable movement detection if desired Boost mode lets you temporarily change the temperature when soldering (i.e. raise the temperature for short periods) (TS100/Pinecil) Battery charge level indicator if power source set to a lipo cell count (TS80/TS80P/Pinecil) Power bank operating voltage is displayed Custom boot up logo support Automatic LCD rotation based on the orientation Menu System This new firmware uses a new menu system to allow access to the settings on the device. When on the main screen and having the tip plugged in, the unit shows a pair of prompts for the two most common operations. Pressing the button near the tip enters the soldering mode Pressing the button near the USB end enters the settings menu When not in soldering mode , holding down the button near the tip will enter soldering temperature adjust mode (This is the same as the one in the soldering mode , but allows to adjust the temperature before heating up), in soldering mode however this will activate boost mode as long as you hold down the button. Holding down the button near the USB end will show the debug menu . In soldering mode this ends the heating. Operation details are over in the Menu information.","title":"Home"},{"location":"#ironos-flexible-soldering-iron-control-firmware","text":"The firmware implements all of the standard features of a 'smart' soldering iron, with lots of little extras and tweaks. I highly recommend reading the installation guide fully when installing on your iron. And after install just explore the settings menu. For soldering irons that are designed to be powered by 'smart' power sources (PD and QC), the firmware supports settings around the negotiated power and voltage. For soldering irons that are designed to be powered by batteries (TS100 & Pinecil), settings for a cutoff voltage for battery protection are supported. Currently 31 languages are supported. When downloading the firmware for your soldering iron, take note of the language code in the file name. This project is considered feature complete for use as a soldering iron, so please suggest any feature improvements you would like! This firmware does NOT support the USB port while running for changing settings. This is done through the onscreen menu only. Logos are edited on a computer and flashed like firmware. Device DC QC PD EPR BLE Battery Recommended MHP30 \u274c \u274c \u2714\ufe0f \u274c \u274c \u274c \u2714\ufe0f Pinecil V1 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c \u274c \u2714\ufe0f \u2714\ufe0f Pinecil V2 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f TS80P \u274c \u2714\ufe0f \u2714\ufe0f \u274c \u274c \u2714\ufe0f \u2714\ufe0f TS100 \u2714\ufe0f \u274c \u274c \u274c \u274c \u2714\ufe0f \u274c TS80 \u274c \u2714\ufe0f \u274c \u274c \u274c \u2714\ufe0f \u274c *Please note that Miniware started shipping TS100's using cloned STM32 Chips. While these do work with IronOS, their DFU bootloader works terribly, and it is hard to get it to successfully flash larger firmware images like IronOS without timing out. This is the main reason why the TS100 is no longer recommended .","title":"IronOS - Flexible Soldering iron control Firmware"},{"location":"#getting-started","text":"To get started with IronOS firmware, please jump to Getting Started Guide . But the TL;DR is to press the button near the front of the iron to heat up. Use the button near the back of the iron to enter the settings menu. Long hold the rear button in soldering mode to exit back to the start screen.","title":"Getting Started"},{"location":"#installation","text":"For notes on installation for your device, please refer to the flashing guide for your device: MHP30 Pinecil V1 Pinecil V2 TS80 / TS80P TS100","title":"Installation"},{"location":"#key-features","text":"PID style iron temperature control Automatic sleep with selectable sensitivity Motion wake support All settings exposed in the intuitive menu (TS100) Set a voltage lower limit for Lithium batteries so you don't kill your battery pack (TS80) Set 18 W or 24 W settings for your power bank (TS80P) Automatically negotiates appropriate PD and falls back to QC mode like TS80 (Pinecil) Supports all 3 power modes (PD, QC, DC In). (Pinecilv2) Supports USB-PD EPR for 28V operation. Improved readability Fonts, supporting multiple languages Use hardware features to improve reliability Can disable movement detection if desired Boost mode lets you temporarily change the temperature when soldering (i.e. raise the temperature for short periods) (TS100/Pinecil) Battery charge level indicator if power source set to a lipo cell count (TS80/TS80P/Pinecil) Power bank operating voltage is displayed Custom boot up logo support Automatic LCD rotation based on the orientation","title":"Key Features"},{"location":"#menu-system","text":"This new firmware uses a new menu system to allow access to the settings on the device. When on the main screen and having the tip plugged in, the unit shows a pair of prompts for the two most common operations. Pressing the button near the tip enters the soldering mode Pressing the button near the USB end enters the settings menu When not in soldering mode , holding down the button near the tip will enter soldering temperature adjust mode (This is the same as the one in the soldering mode , but allows to adjust the temperature before heating up), in soldering mode however this will activate boost mode as long as you hold down the button. Holding down the button near the USB end will show the debug menu . In soldering mode this ends the heating. Operation details are over in the Menu information.","title":"Menu System"},{"location":"DebugMenu/","text":"Debugging Menu In this firmware there is extra debugging information in a hidden sub-menu. This menu is meant to be simple, so it has no fancy GUI animations. Access it by pressing the rear button ( -/B ) on the iron while it is on the home screen. Use the front button ( +/A ) to scroll through the menu. To exit, use the rear button ( -/B ) again. Menu items Items are shown in the menu on a single line, so they use short codes and appear in this order: ID This is used by Irons that have an ID and serial number to help check if the iron is authentic. All Pinecil V1 show the same ID number as this is the number programmed into the MCU. The new Pinecil V2 released Aug. 2, 2022 now uses MCU BL706, which enables generating a unique ID/Serial number to every iron. This can be used to verify your Pinecil authenticity here . ACC This indicates the accelerometer that is fitted inside the unit. MMA8652 LIS2DH12 BMA223 MSA301 SC7A20 None -> running in fallback without movement detection Scanning -> Still searching I2C for one PWR This indicates the current power source for the iron. This may change during power up as the sources are negotiated in turn. DC input (dumb) QC input (We used QC2/3 negotiation for current supply) PD W. VBus input (PD subsystem is used to negotiate for current supply); and VBus is connected to your input power source PD No VBus input (PD subsystem is used to negotiate for current supply); and VBus is NOT connected to your input power source. If it is Not required or possible to do a special mod of your PCB (i.e. late model V1, some early Green PCB models) then [PD No VBus] displays on-screen ( see details and PD Debug section below ). Vin The input voltage as read by the internal ADC. Can be used to sanity check it is being read correctly. Tip C This is the tip temperature in \u00b0C. This can be used with RTip for assessing temperature processing performance. Han C This is the handle temperature or more accurately the reading of the Cold Junction Compensation (CJC) temperature sensor. This is expressed in \u00b0C. Range of 20-40 \u00b0C is normal depending on how hot/cold the room is and how long power has been plugged in which warms the PCB further. This is used for CJC of the tip temperature. If CHan is extremely high, this indicates the temperature sensor isn't reading correctly ( see Troubleshooting ) Max C This indicates the max temperature in \u00b0C that the system estimates it can measure the tip reliably to. This is dependent on a few factors including the handle temperature so it can move around during use. As you use the iron, the Max increases to a point. UpTime This shows how many deciseconds the unit has been powered for (600 ds = 1 minute). Move This is the last timestamp of movement. When the iron is moved, this should update to match the Time field (previous menu item). This can be used for checking performance of the movement detection code. Tip Res This indicates the tip resistance that the device is currently using. For devices with multiple possible values to choose from (Pinecil V2), the appropriate value is automatically detected at every boot-up. Tip should be installed before boot-up or reading can not be done. Tip R This is the raw tip reading in \u03bcV. Tip must be installed or reading will be high/inaccurate. At cool, the range of 700-1000 is normal for larger tips and ~1500 for smaller tips (TS80). This is used to evaluate the calibration routines. Tip O This is the offset resulting from the 'Cold Junction Compensation Calibration' . HW G This indicates the high water mark for the stack for the GUI thread. The smaller this number is, the less headroom we have in the stack. As this is a high-water mater, you should only trust this once you have walked through all GUI options to \"hit\" the worst one. HW M This indicates the high-water mark for the stack for the movement detection thread. The smaller this number is, the less headroom we have in the stack. HW P This indicates the high-water mark for the stack for the PID thread. The smaller this number is, the less headroom we have in the stack. Hall This appears if your device is capable of having a hall effect sensor installed (Pinecil). This shows the current magnetic field strength reading from the sensor. It is used to check if the sensor is operational, and for diagnostics and optimal placement of magnets on a stand (higher number is better/stronger). See Hall Sensor for details . PD Debug menu On the Pinecil; if the iron is booted up while long holding the front button ( + ); it will show an extra hidden menu for inspecting USB-PD power adapters. We can also connect to any PD USB power to check Vbus status, even some cell phones with a USB-C port will work if it is PD. It will not show PD messages when Pinecil is powered by DC port, QC, or USB 5V (non-PD). For example, if you connect to a QC charger, you may simply see \"PD State 6\" which indicates \"waiting for source\" as no PD messages will be ever be sent and you will not be able to use ( + ) to scroll through PD negotiated messages. Pressing ( + ) cycles through elements, and ( - ) or unplugging will exit the menu. The first page shows the PD negotiation stage number; which can be used for diagnosing if PD is not working. Once negotiation is complete; use ( + ) button to advance to other screens which show the different proposals advertised for voltage and current (State 12 means all is good with the PD charger). Below is a method for user modification to convert some early models of Pinecil V1 to safely support 24V on the DC5525 barrel. \u26a0\ufe0f Warning: do this at your own risk, read everything in this document, and go to the Pine64 community chat if you desire advice. An incorrect cut of the trace could render the Pinecil non-working. Background: a simple user modification to the PCB on some models of original V1 allows it to safely use DC barrel 24V by cutting a trace line to the Vbus which held it back to 21V. You can check whether your Pinecil V1 needs the update or can benefit from it by using a hidden trick in the PD debug menu. Follow instructions above to enter the PD Debug menu. After a few seconds or after PD negotiates (state above 5) it will show [PD No VBus] if it is not needed (i.e., late model V1). Alternately, if it shows [VBus] , then the mod has not been done and there is still a connection to the Vbus (the Vbus connection limits you to 21V until you do the mod). If you need to do the mod, then follow the instructions/links below which have photos. Careful to only cut the trace and nothing else. Then use the PD debug menu again to check for [PD No Vbus] before attaching any 24V PSU to the DC barrel. If you do not get the message, then try cutting the trace a little deeper or using alcohol to clear the gap of copper dust. Then check PD messages again. If you need advice/tips, join the Pine64 chat room. The mod method is shown in the February 2022 PINE64 community updates . Early Pinecil V1 models required cutting a trace to achieve 24V safety with DC barrel PSU. Late model V1 made sometime in 2022 came with [No Vbus] already displayed, and no mod is required. | Pinecil V2 model released Aug. 2, 2022 is an overhaul of the PCB with all relevant components capable of 28V. V2 requires no mods to support the use of 24V DC Barrel jack charger. | :--------","title":"Debug Menu"},{"location":"DebugMenu/#debugging-menu","text":"In this firmware there is extra debugging information in a hidden sub-menu. This menu is meant to be simple, so it has no fancy GUI animations. Access it by pressing the rear button ( -/B ) on the iron while it is on the home screen. Use the front button ( +/A ) to scroll through the menu. To exit, use the rear button ( -/B ) again.","title":"Debugging Menu"},{"location":"DebugMenu/#menu-items","text":"Items are shown in the menu on a single line, so they use short codes and appear in this order:","title":"Menu items"},{"location":"DebugMenu/#id","text":"This is used by Irons that have an ID and serial number to help check if the iron is authentic. All Pinecil V1 show the same ID number as this is the number programmed into the MCU. The new Pinecil V2 released Aug. 2, 2022 now uses MCU BL706, which enables generating a unique ID/Serial number to every iron. This can be used to verify your Pinecil authenticity here .","title":"ID"},{"location":"DebugMenu/#acc","text":"This indicates the accelerometer that is fitted inside the unit. MMA8652 LIS2DH12 BMA223 MSA301 SC7A20 None -> running in fallback without movement detection Scanning -> Still searching I2C for one","title":"ACC"},{"location":"DebugMenu/#pwr","text":"This indicates the current power source for the iron. This may change during power up as the sources are negotiated in turn. DC input (dumb) QC input (We used QC2/3 negotiation for current supply) PD W. VBus input (PD subsystem is used to negotiate for current supply); and VBus is connected to your input power source PD No VBus input (PD subsystem is used to negotiate for current supply); and VBus is NOT connected to your input power source. If it is Not required or possible to do a special mod of your PCB (i.e. late model V1, some early Green PCB models) then [PD No VBus] displays on-screen ( see details and PD Debug section below ).","title":"PWR"},{"location":"DebugMenu/#vin","text":"The input voltage as read by the internal ADC. Can be used to sanity check it is being read correctly.","title":"Vin"},{"location":"DebugMenu/#tip-c","text":"This is the tip temperature in \u00b0C. This can be used with RTip for assessing temperature processing performance.","title":"Tip C"},{"location":"DebugMenu/#han-c","text":"This is the handle temperature or more accurately the reading of the Cold Junction Compensation (CJC) temperature sensor. This is expressed in \u00b0C. Range of 20-40 \u00b0C is normal depending on how hot/cold the room is and how long power has been plugged in which warms the PCB further. This is used for CJC of the tip temperature. If CHan is extremely high, this indicates the temperature sensor isn't reading correctly ( see Troubleshooting )","title":"Han C"},{"location":"DebugMenu/#max-c","text":"This indicates the max temperature in \u00b0C that the system estimates it can measure the tip reliably to. This is dependent on a few factors including the handle temperature so it can move around during use. As you use the iron, the Max increases to a point.","title":"Max C"},{"location":"DebugMenu/#uptime","text":"This shows how many deciseconds the unit has been powered for (600 ds = 1 minute).","title":"UpTime"},{"location":"DebugMenu/#move","text":"This is the last timestamp of movement. When the iron is moved, this should update to match the Time field (previous menu item). This can be used for checking performance of the movement detection code.","title":"Move"},{"location":"DebugMenu/#tip-res","text":"This indicates the tip resistance that the device is currently using. For devices with multiple possible values to choose from (Pinecil V2), the appropriate value is automatically detected at every boot-up. Tip should be installed before boot-up or reading can not be done.","title":"Tip Res"},{"location":"DebugMenu/#tip-r","text":"This is the raw tip reading in \u03bcV. Tip must be installed or reading will be high/inaccurate. At cool, the range of 700-1000 is normal for larger tips and ~1500 for smaller tips (TS80). This is used to evaluate the calibration routines.","title":"Tip R"},{"location":"DebugMenu/#tip-o","text":"This is the offset resulting from the 'Cold Junction Compensation Calibration' .","title":"Tip O"},{"location":"DebugMenu/#hw-g","text":"This indicates the high water mark for the stack for the GUI thread. The smaller this number is, the less headroom we have in the stack. As this is a high-water mater, you should only trust this once you have walked through all GUI options to \"hit\" the worst one.","title":"HW G"},{"location":"DebugMenu/#hw-m","text":"This indicates the high-water mark for the stack for the movement detection thread. The smaller this number is, the less headroom we have in the stack.","title":"HW M"},{"location":"DebugMenu/#hw-p","text":"This indicates the high-water mark for the stack for the PID thread. The smaller this number is, the less headroom we have in the stack.","title":"HW P"},{"location":"DebugMenu/#hall","text":"This appears if your device is capable of having a hall effect sensor installed (Pinecil). This shows the current magnetic field strength reading from the sensor. It is used to check if the sensor is operational, and for diagnostics and optimal placement of magnets on a stand (higher number is better/stronger). See Hall Sensor for details .","title":"Hall"},{"location":"DebugMenu/#pd-debug-menu","text":"On the Pinecil; if the iron is booted up while long holding the front button ( + ); it will show an extra hidden menu for inspecting USB-PD power adapters. We can also connect to any PD USB power to check Vbus status, even some cell phones with a USB-C port will work if it is PD. It will not show PD messages when Pinecil is powered by DC port, QC, or USB 5V (non-PD). For example, if you connect to a QC charger, you may simply see \"PD State 6\" which indicates \"waiting for source\" as no PD messages will be ever be sent and you will not be able to use ( + ) to scroll through PD negotiated messages. Pressing ( + ) cycles through elements, and ( - ) or unplugging will exit the menu. The first page shows the PD negotiation stage number; which can be used for diagnosing if PD is not working. Once negotiation is complete; use ( + ) button to advance to other screens which show the different proposals advertised for voltage and current (State 12 means all is good with the PD charger).","title":"PD Debug menu"},{"location":"DebugMenu/#below-is-a-method-for-user-modification-to-convert-some-early-models-of-pinecil-v1-to-safely-support-24v-on-the-dc5525-barrel","text":"\u26a0\ufe0f Warning: do this at your own risk, read everything in this document, and go to the Pine64 community chat if you desire advice. An incorrect cut of the trace could render the Pinecil non-working. Background: a simple user modification to the PCB on some models of original V1 allows it to safely use DC barrel 24V by cutting a trace line to the Vbus which held it back to 21V. You can check whether your Pinecil V1 needs the update or can benefit from it by using a hidden trick in the PD debug menu. Follow instructions above to enter the PD Debug menu. After a few seconds or after PD negotiates (state above 5) it will show [PD No VBus] if it is not needed (i.e., late model V1). Alternately, if it shows [VBus] , then the mod has not been done and there is still a connection to the Vbus (the Vbus connection limits you to 21V until you do the mod). If you need to do the mod, then follow the instructions/links below which have photos. Careful to only cut the trace and nothing else. Then use the PD debug menu again to check for [PD No Vbus] before attaching any 24V PSU to the DC barrel. If you do not get the message, then try cutting the trace a little deeper or using alcohol to clear the gap of copper dust. Then check PD messages again. If you need advice/tips, join the Pine64 chat room. The mod method is shown in the February 2022 PINE64 community updates . Early Pinecil V1 models required cutting a trace to achieve 24V safety with DC barrel PSU. Late model V1 made sometime in 2022 came with [No Vbus] already displayed, and no mod is required. | Pinecil V2 model released Aug. 2, 2022 is an overhaul of the PCB with all relevant components capable of 28V. V2 requires no mods to support the use of 24V DC Barrel jack charger. | :--------","title":"Below is a method for user modification to convert some early models of Pinecil V1 to safely support 24V on the DC5525 barrel."},{"location":"Development/","text":"Development Building this software can be performed two ways: using the STM32CubeIDE or using command line tools. STM32CubeIDE The easiest way to start working with the STM32CubeIDE is to create a new project for the STM32F103RCTx. Once this is created, remove the auto-generated source code. Next, drag the contents of the source folder into the project and choose to link to files. You will need to update the build settings for include paths and point to the new .ld linker file. Command line tools and building a release In the source folder there is a Makefile that can be used to build the repository using command line tools. When running the make command, specify which model of the device and the language(s) you would like to use. macOS Use the following steps to set up a build environment for IronOS on the command line (in Terminal). Follow steps 1 \u2013 3 here to install the toolchain needed to compile for STM32 microcontrollers. Install python : brew install python (Optional) Update pip so it doesn't warn you about being out-of-date: python3 -m pip install --upgrade pip Change to the source directory: cd source Create a Python virtual environment for IronOS named ironos-venv to keep your Python installation clean: python3 -m venv ironos-venv Activate the Python virtual environment: source ironos-venv/bin/activate Install the dependencies required to run make-translation.py : pip install bdflib All done! See some examples below for how you can build your own IronOS. Examples To build a single language Simplified Chinese firmware for the TS80P with 8 simultaneous jobs: make -j8 model=TS80P firmware-ZH_CN To build a European multi-language firmware for the Pinecil with as many simultaneous jobs as there are logical processors on Linux: make -j$(nproc) model=Pinecil firmware-multi_European To build a Cyrillic compressed multi-language firmware for the Pinecil with as many simultaneous jobs as there are logical processors on macOS: make -j$(sysctl -n hw.logicalcpu) model=Pinecil firmware-multi_compressed_Bulgarian+Russian+Serbian+Ukrainian To build a custom multi-language firmware including English and Simplified Chinese for the TS80: make -j8 model=TS80 custom_multi_langs=\"EN ZH_CN\" firmware-multi_Custom To build a custom compressed multi-language firmware including German, Spanish, and French for the TS100 (note if model is unspecified, it will default to TS100 ): make -j8 custom_multi_langs=\"DE ES FR\" firmware-multi_compressed_Custom To build a release instead, run the build.sh script. This will update translations and also build every language for all device models. For macOS users, replace make -j$(nproc) in the script with make -j$(sysctl -n hw.logicalcpu) before running. Updating languages To update the language translation files and their associated font maps, execute the make_translation.py code from the Translations directory. If you edit the translation definitions or the English translation, please also run gen_menu_docs.py to update the settings menu documentation automatically. Building Pinecil V1 I highly recommend using the command line tools and using Docker to run the compiler. It's a bit fussier on setup than the STM tooling, and this is by far the easiest way. If you need an IDE I have used Nuclei's IDE . Follow the same idea as the STM Cube IDE notes above. Building Pinecil V2","title":"Development"},{"location":"Development/#development","text":"Building this software can be performed two ways: using the STM32CubeIDE or using command line tools.","title":"Development"},{"location":"Development/#stm32cubeide","text":"The easiest way to start working with the STM32CubeIDE is to create a new project for the STM32F103RCTx. Once this is created, remove the auto-generated source code. Next, drag the contents of the source folder into the project and choose to link to files. You will need to update the build settings for include paths and point to the new .ld linker file.","title":"STM32CubeIDE"},{"location":"Development/#command-line-tools-and-building-a-release","text":"In the source folder there is a Makefile that can be used to build the repository using command line tools. When running the make command, specify which model of the device and the language(s) you would like to use.","title":"Command line tools and building a release"},{"location":"Development/#macos","text":"Use the following steps to set up a build environment for IronOS on the command line (in Terminal). Follow steps 1 \u2013 3 here to install the toolchain needed to compile for STM32 microcontrollers. Install python : brew install python (Optional) Update pip so it doesn't warn you about being out-of-date: python3 -m pip install --upgrade pip Change to the source directory: cd source Create a Python virtual environment for IronOS named ironos-venv to keep your Python installation clean: python3 -m venv ironos-venv Activate the Python virtual environment: source ironos-venv/bin/activate Install the dependencies required to run make-translation.py : pip install bdflib All done! See some examples below for how you can build your own IronOS.","title":"macOS"},{"location":"Development/#examples","text":"To build a single language Simplified Chinese firmware for the TS80P with 8 simultaneous jobs: make -j8 model=TS80P firmware-ZH_CN To build a European multi-language firmware for the Pinecil with as many simultaneous jobs as there are logical processors on Linux: make -j$(nproc) model=Pinecil firmware-multi_European To build a Cyrillic compressed multi-language firmware for the Pinecil with as many simultaneous jobs as there are logical processors on macOS: make -j$(sysctl -n hw.logicalcpu) model=Pinecil firmware-multi_compressed_Bulgarian+Russian+Serbian+Ukrainian To build a custom multi-language firmware including English and Simplified Chinese for the TS80: make -j8 model=TS80 custom_multi_langs=\"EN ZH_CN\" firmware-multi_Custom To build a custom compressed multi-language firmware including German, Spanish, and French for the TS100 (note if model is unspecified, it will default to TS100 ): make -j8 custom_multi_langs=\"DE ES FR\" firmware-multi_compressed_Custom To build a release instead, run the build.sh script. This will update translations and also build every language for all device models. For macOS users, replace make -j$(nproc) in the script with make -j$(sysctl -n hw.logicalcpu) before running.","title":"Examples"},{"location":"Development/#updating-languages","text":"To update the language translation files and their associated font maps, execute the make_translation.py code from the Translations directory. If you edit the translation definitions or the English translation, please also run gen_menu_docs.py to update the settings menu documentation automatically.","title":"Updating languages"},{"location":"Development/#building-pinecil-v1","text":"I highly recommend using the command line tools and using Docker to run the compiler. It's a bit fussier on setup than the STM tooling, and this is by far the easiest way. If you need an IDE I have used Nuclei's IDE . Follow the same idea as the STM Cube IDE notes above.","title":"Building Pinecil V1"},{"location":"Development/#building-pinecil-v2","text":"","title":"Building Pinecil V2"},{"location":"GettingStarted/","text":"Getting Started Getting started with IronOS on your Pinecil/TS80/TS80P/TS100. If your device did not come with IronOS already installed, or if you need to update to the latest version; please see the flashing guide for your device: MHP30 Pinecil V1 Pinecil V2 TS80 / TS80P TS100 It is recommended to update to the newest stable release. Once your Iron has been flashed, on first power on it may warn you about the system settings being reset. Do not panic ; this is 100% completely normal. This is here to note to you that they have been reset to handle the internal structure changing. If you receive a warning about the accelerometer or USB-PD not being detected, please see here . The Home screen (or idle screen) This is the landing page of the firmware, from here you can choose to either go into the settings menu or go into soldering mode . By default this will show a screen similar to the one below: Note that this may be drawn mirrored depending on the orientation of your screen (detailed mode shows a different home screen). The soldering iron symbol on the screen will appear near the tip. This is here to indicate that pressing the button closest to the front of the iron will enter soldering mode. And naturally, the spanner like icon represents that pressing the button near the rear of the soldering iron will enter the settings menu. In the settings, you can turn on a detailed idle screen instead. The buttons still function the same, however, the image will be swapped for a text telling you the current status of the iron with extra details. Depending on how your device is being powered, at right side of the screen, the firmware will either show the voltage your unit is being provided with, a battery icon (if battery mode is enabled) or a power plug icon. If you see an ( X ) where the soldering iron should be, this indicates that the firmware can't see the tip connected. This could indicate a problem with the iron or tip. First, try removing the tip screw and tip and gently reinstalling both; ensure that the tip is seated all the way back. If the issue persists please see the hardware issues section . This OLED screen features burn-in protection; if no buttons or movement have been detected for a while it will automatically blank the screen to reduce burn-in when the iron is left unattended. Any movement or button press will wake the screen. Hidden Extras Additionally to the two icons shown, there are two \"hidden\" actions that can be performed on this menu. If you press and hold the button near the tip ( +/A ), this enters the temperature adjustment screen. Normally this is not required; but if you would like to adjust the set temperature before the tip starts to heat, this can be useful. If you press and hold the button near the rear of the iron ( -/B ), it will take you into the debug menu . Soldering Mode When you press the button to enter the soldering mode, the iron will instantly start to heat up the tip. The firmware defaults to 320 \u00b0C as the set point for the soldering mode, however on this screen you can enter into the adjustment screen by pressing either button. Pressing and holding the button near the tip will enter Boost mode. This allows a temporary override of the set temperature to a higher (or lower) value. This can be useful as a way to force the tip to a higher temperature to drive more wattage into a large joint when the thermal connection is not ideal. Pressing and holding the rear button will exit soldering mode and land you back at the home screen. You can also do this by pressing both buttons at once and this will also work, this is a bit harder to do but is kept for compatibility with the Miniware firmware. Pressing and holding both buttons at once will enter locked mode, which will prevent the buttons from doing anything. You can in the settings allow boost mode in locked mode optionally. This can be useful if you find yourself hitting the buttons and entering into the temperature adjustment screen by accident. Idle Sleep If the iron detects a period of time without any significant movement, it will enter sleep mode. This is indicated with a screen graphic similar to Zzzz (or text in detailed mode). In Sleep mode, the temperature of the iron automatically lowers to 150 \u00b0C (default), which is just below the melting point of the solder. This helps reduce rate of oxidation and damage to the iron tip. In general, when not using the iron, unplug it or let it sleep to increase the longevity of replaceable tips. The default sleep temperature can be customized. Simply picking up or moving the iron will wake it back up into soldering mode. You can also press any button and this will also wake the iron up. Optional Hall Effect Feature (Pinecil only): Pinecil has an unpopulated footprint (U14) for a hall effect sensor (Si7210-B-00-IV). Adding the sensor and placing a neodymium magnet on the holder stand will trigger Pinecil to sleep after it enters the stand, and Zzzz will appear on-screen. The magnet is positioned on the stand in proximity to the sensor/handle which then activates one of 10 user defined settings (0=off, 1=lowest sensitivity, 9=highest sensitivity). Read the Hall Sensor document for details on installation . Idle Shutdown If, after entering sleep mode, the iron still does not see movement for a much longer time (default=10 minutes); it will shut down and return to the home screen. Settings Menu The settings menu is the most evolving aspect of the firmware, so each option is not documented here. However, do not panic, as every menu option has an on-screen description so you don't need to come back here to figure them all out. To navigate the menu, the two buttons act separately. The rear button ( -/B ) is pressed to enter the menu and scrolls down the main options, and the other front button ( +/A ) will enter and change the current option. To see a description of an option, just wait, and after a few seconds, it will scroll across the screen. The menu is comprised of a 'main menu' of categories and then sub-items that allow you to adjust parameters. You can long hold buttons to change through options faster, and there is some acceleration when holding the buttons. There is a small scrollbar that appears along the right edge of the screen to indicate how far through the current list you are (looks like a dot). Additionally, this scrollbar will blink rapidly when you are on the last value in a range of a sub-menu. For example, if you are in Motion Sensitivity, which has a range of 0 - 9, it will blink when you are at 9. I highly recommend taking a few minutes to go through all of the options in the menu to get a feel for what you can change, almost every aspect of the internal system is adjustable to suit your needs. If you want to start over, simply go to Advanced settings > Restore default settings, confirm using the front ( +/A ) button. This sets all menu items to defaults, and keeps the same version firmware.","title":"Getting Started"},{"location":"GettingStarted/#getting-started","text":"Getting started with IronOS on your Pinecil/TS80/TS80P/TS100. If your device did not come with IronOS already installed, or if you need to update to the latest version; please see the flashing guide for your device: MHP30 Pinecil V1 Pinecil V2 TS80 / TS80P TS100 It is recommended to update to the newest stable release. Once your Iron has been flashed, on first power on it may warn you about the system settings being reset. Do not panic ; this is 100% completely normal. This is here to note to you that they have been reset to handle the internal structure changing. If you receive a warning about the accelerometer or USB-PD not being detected, please see here .","title":"Getting Started"},{"location":"GettingStarted/#the-home-screen-or-idle-screen","text":"This is the landing page of the firmware, from here you can choose to either go into the settings menu or go into soldering mode . By default this will show a screen similar to the one below: Note that this may be drawn mirrored depending on the orientation of your screen (detailed mode shows a different home screen). The soldering iron symbol on the screen will appear near the tip. This is here to indicate that pressing the button closest to the front of the iron will enter soldering mode. And naturally, the spanner like icon represents that pressing the button near the rear of the soldering iron will enter the settings menu. In the settings, you can turn on a detailed idle screen instead. The buttons still function the same, however, the image will be swapped for a text telling you the current status of the iron with extra details. Depending on how your device is being powered, at right side of the screen, the firmware will either show the voltage your unit is being provided with, a battery icon (if battery mode is enabled) or a power plug icon. If you see an ( X ) where the soldering iron should be, this indicates that the firmware can't see the tip connected. This could indicate a problem with the iron or tip. First, try removing the tip screw and tip and gently reinstalling both; ensure that the tip is seated all the way back. If the issue persists please see the hardware issues section . This OLED screen features burn-in protection; if no buttons or movement have been detected for a while it will automatically blank the screen to reduce burn-in when the iron is left unattended. Any movement or button press will wake the screen.","title":"The Home screen (or idle screen)"},{"location":"GettingStarted/#hidden-extras","text":"Additionally to the two icons shown, there are two \"hidden\" actions that can be performed on this menu. If you press and hold the button near the tip ( +/A ), this enters the temperature adjustment screen. Normally this is not required; but if you would like to adjust the set temperature before the tip starts to heat, this can be useful. If you press and hold the button near the rear of the iron ( -/B ), it will take you into the debug menu .","title":"Hidden Extras"},{"location":"GettingStarted/#soldering-mode","text":"When you press the button to enter the soldering mode, the iron will instantly start to heat up the tip. The firmware defaults to 320 \u00b0C as the set point for the soldering mode, however on this screen you can enter into the adjustment screen by pressing either button. Pressing and holding the button near the tip will enter Boost mode. This allows a temporary override of the set temperature to a higher (or lower) value. This can be useful as a way to force the tip to a higher temperature to drive more wattage into a large joint when the thermal connection is not ideal. Pressing and holding the rear button will exit soldering mode and land you back at the home screen. You can also do this by pressing both buttons at once and this will also work, this is a bit harder to do but is kept for compatibility with the Miniware firmware. Pressing and holding both buttons at once will enter locked mode, which will prevent the buttons from doing anything. You can in the settings allow boost mode in locked mode optionally. This can be useful if you find yourself hitting the buttons and entering into the temperature adjustment screen by accident.","title":"Soldering Mode"},{"location":"GettingStarted/#idle-sleep","text":"If the iron detects a period of time without any significant movement, it will enter sleep mode. This is indicated with a screen graphic similar to Zzzz (or text in detailed mode). In Sleep mode, the temperature of the iron automatically lowers to 150 \u00b0C (default), which is just below the melting point of the solder. This helps reduce rate of oxidation and damage to the iron tip. In general, when not using the iron, unplug it or let it sleep to increase the longevity of replaceable tips. The default sleep temperature can be customized. Simply picking up or moving the iron will wake it back up into soldering mode. You can also press any button and this will also wake the iron up.","title":"Idle Sleep"},{"location":"GettingStarted/#optional-hall-effect-feature-pinecil-only","text":"Pinecil has an unpopulated footprint (U14) for a hall effect sensor (Si7210-B-00-IV). Adding the sensor and placing a neodymium magnet on the holder stand will trigger Pinecil to sleep after it enters the stand, and Zzzz will appear on-screen. The magnet is positioned on the stand in proximity to the sensor/handle which then activates one of 10 user defined settings (0=off, 1=lowest sensitivity, 9=highest sensitivity). Read the Hall Sensor document for details on installation .","title":"Optional Hall Effect Feature (Pinecil only):"},{"location":"GettingStarted/#idle-shutdown","text":"If, after entering sleep mode, the iron still does not see movement for a much longer time (default=10 minutes); it will shut down and return to the home screen.","title":"Idle Shutdown"},{"location":"GettingStarted/#settings-menu","text":"The settings menu is the most evolving aspect of the firmware, so each option is not documented here. However, do not panic, as every menu option has an on-screen description so you don't need to come back here to figure them all out. To navigate the menu, the two buttons act separately. The rear button ( -/B ) is pressed to enter the menu and scrolls down the main options, and the other front button ( +/A ) will enter and change the current option. To see a description of an option, just wait, and after a few seconds, it will scroll across the screen. The menu is comprised of a 'main menu' of categories and then sub-items that allow you to adjust parameters. You can long hold buttons to change through options faster, and there is some acceleration when holding the buttons. There is a small scrollbar that appears along the right edge of the screen to indicate how far through the current list you are (looks like a dot). Additionally, this scrollbar will blink rapidly when you are on the last value in a range of a sub-menu. For example, if you are in Motion Sensitivity, which has a range of 0 - 9, it will blink when you are at 9. I highly recommend taking a few minutes to go through all of the options in the menu to get a feel for what you can change, almost every aspect of the internal system is adjustable to suit your needs. If you want to start over, simply go to Advanced settings > Restore default settings, confirm using the front ( +/A ) button. This sets all menu items to defaults, and keeps the same version firmware.","title":"Settings Menu"},{"location":"HallSensor/","text":"Hall Effect Sensor Sleep Mode Menu In Sleep mode, the iron automatically lowers the temperature to 150 \u00b0C (default). This default was chosen as it is just below the melting point of many solders. A stand-by lower temperature helps reduce the rate of oxidation and prevents damage to iron tips. In general, when not using the iron, unplug it or let it sleep to increase the longevity of replaceable tips. The default sleep temperature can be customized. Simply moving the iron or pressing any button will wake it back up into soldering mode. Optional Hall Effect Feature (Pinecil only): Inside the Sleep Menu is an additional type of sleep setting. Pinecil has an unpopulated footprint ( U14 ) for a hall effect sensor, Silicon Labs Si7210-B-00-IV . After installing the hall effect sensor (HES), it is possible to auto-trigger Pinecil to enter sleep mode when it enters the stand, and Zzzz will appear (or text in detailed mode). This could be a fun enhancement for any Pinecil and adds a feature typically only found in more expensive high-end irons. The HES is available at many electronic stores for ~$2-$6. After installing the HES on the PCB, place a magnet on the stand close enough to the sensor to activate one of ten user selectable settings. 0=off, 1=1000, 2=750, 3=500, 4=250, 5=150, 6=100, 7=75, 8=50, 9=25 (9 has the highest sensitivity to magnets) Setting of 1 might be used if you solder on PCBs with magnets and do not wish Pinecil to auto-sleep constantly. A very strong/large magnet would be required on the stand to activate the sleep mode if you use setting 1. Setting of 9 would be useful if you only had a small magnet and are not concerned about Pinecil falsely triggering sleep mode near magnetized items/tools. Actively watch the hall number change while you slowly move the magnet around to seek the best locations & whether you have too many or too few magnets. Position the magnet(s) where you have the highest hall number will ensure consistent sleep mode when you place the iron in the stand. This requires some experimenting. See debug menu for how to display the Hall number Note that the sensor is physically located near the copper contacts for the tip at the front of the handle. Reference Schematics U14 . Neodymium magnets are recommended. If using small magnets, 2-3 may be required, but too many could also be detrimental. Positioning/type/quantity of magnets is important for best results. Sometimes too many magnets breaks the effect by distorting the magnetic field as seen in this demo video . The video shows magnets at the top of the stand, and the pinecil goes correctly into Zzzz with only those magnets. When more magnets are added at the side, the Pinecil did not go to sleep, which is contrary to the goal. See the PDF below for details on magnetic fields with SI7210-B. Orientation of North and South faces of magnets is important to increase reaction of the hall sensor see data sheet SI7210-B-00-IV .","title":"Hall Sensor (Pinecil)"},{"location":"HallSensor/#hall-effect-sensor","text":"","title":"Hall Effect Sensor"},{"location":"HallSensor/#sleep-mode-menu","text":"In Sleep mode, the iron automatically lowers the temperature to 150 \u00b0C (default). This default was chosen as it is just below the melting point of many solders. A stand-by lower temperature helps reduce the rate of oxidation and prevents damage to iron tips. In general, when not using the iron, unplug it or let it sleep to increase the longevity of replaceable tips. The default sleep temperature can be customized. Simply moving the iron or pressing any button will wake it back up into soldering mode.","title":"Sleep Mode Menu"},{"location":"HallSensor/#optional-hall-effect-feature-pinecil-only","text":"Inside the Sleep Menu is an additional type of sleep setting. Pinecil has an unpopulated footprint ( U14 ) for a hall effect sensor, Silicon Labs Si7210-B-00-IV . After installing the hall effect sensor (HES), it is possible to auto-trigger Pinecil to enter sleep mode when it enters the stand, and Zzzz will appear (or text in detailed mode). This could be a fun enhancement for any Pinecil and adds a feature typically only found in more expensive high-end irons. The HES is available at many electronic stores for ~$2-$6. After installing the HES on the PCB, place a magnet on the stand close enough to the sensor to activate one of ten user selectable settings. 0=off, 1=1000, 2=750, 3=500, 4=250, 5=150, 6=100, 7=75, 8=50, 9=25 (9 has the highest sensitivity to magnets) Setting of 1 might be used if you solder on PCBs with magnets and do not wish Pinecil to auto-sleep constantly. A very strong/large magnet would be required on the stand to activate the sleep mode if you use setting 1. Setting of 9 would be useful if you only had a small magnet and are not concerned about Pinecil falsely triggering sleep mode near magnetized items/tools. Actively watch the hall number change while you slowly move the magnet around to seek the best locations & whether you have too many or too few magnets. Position the magnet(s) where you have the highest hall number will ensure consistent sleep mode when you place the iron in the stand. This requires some experimenting. See debug menu for how to display the Hall number Note that the sensor is physically located near the copper contacts for the tip at the front of the handle. Reference Schematics U14 . Neodymium magnets are recommended. If using small magnets, 2-3 may be required, but too many could also be detrimental. Positioning/type/quantity of magnets is important for best results. Sometimes too many magnets breaks the effect by distorting the magnetic field as seen in this demo video . The video shows magnets at the top of the stand, and the pinecil goes correctly into Zzzz with only those magnets. When more magnets are added at the side, the Pinecil did not go to sleep, which is contrary to the goal. See the PDF below for details on magnetic fields with SI7210-B. Orientation of North and South faces of magnets is important to increase reaction of the hall sensor see data sheet SI7210-B-00-IV .","title":"Optional Hall Effect Feature (Pinecil only):"},{"location":"Hardware/","text":"Notes on the various supported hardware MHP30 Accelerometer is the MSA301, this is mounted roughly in the middle of the unit USB-PD is using the FUSB302 The hardware I2C bus on PB6/7 is used for the MSA301 and FUSB302 The OLED is the same SSD1306 as everything else, but it\u2019s on a bit-banged bus","title":"Hardware Notes"},{"location":"Hardware/#notes-on-the-various-supported-hardware","text":"","title":"Notes on the various supported hardware"},{"location":"Hardware/#mhp30","text":"Accelerometer is the MSA301, this is mounted roughly in the middle of the unit USB-PD is using the FUSB302 The hardware I2C bus on PB6/7 is used for the MSA301 and FUSB302 The OLED is the same SSD1306 as everything else, but it\u2019s on a bit-banged bus","title":"MHP30"},{"location":"HardwareIssues/","text":"Hardware Issues While we would love everything to work perfectly, sometimes that just doesn't happen. Please do not email maintainers directly, these will generally be ignored. Keep issue discussions to GitHub issues or the discussions page so that the whole community can help and work together. No Accelerometer detected If your iron was previously working, this could be a bug (and we are very sorry). Please check the currently open and recently closed issues to check if anyone else has run into this. You can try going back to a release on the firmware to test if this is a new issue before opening an issue. If this is a new iron, also feel free to open an issue if you don't see any; a vendor could have changed the model of the accelerometer on us without warning again . In which case, support should come shortly. If your iron is new, there is a slim chance your accelerometer may be DOA and need replacement. Note this warning will only be shown the first few times until settings are reset No USB-PD IC detected Generally, this means either something went very awry in the firmware, or the chip is not answering as would normally be expected. Try rolling back to an earlier release to confirm if the issue still persists then the device may need repair. If you have some form of seller protection/support, you most likely want to reach out to this to be safe. If you don't, you can always attempt to replace the IC yourself. As of writing both the TS80P and Pinecil use the FUSB302. Note this warning will only be shown the first few times until settings are reset No tip detected If your tip is not being detected, the most likely cause is that the heater element inside the tip has been damaged from over-temperature, being dropped or bad luck. As the heater coil is part of the temperature measurement circuit neither will work if it's damaged. The best way to see if this is the case is to measure the resistance across the contacts to the tip using a multimeter. you are expecting to see measurements in the range of 4-10 ohms. Anything higher than 10 ohms is generally an issue. Iron will not heat up and displays a high temperature Check the Rtip and CHan numbers ( see debug menu ). Extremly high CHan is suspect to a problem with the cold junction compensation temperature sensor. For Pinecil V1, inspect near U10 which is the TMP36 sensor ( see issue here ). You may be able to reflow/resolder the TMP36 chip at U10 to correct a weak solder joint. If it worked on older firmware, but not on 2.16+, weak solder joints are suspect. The newer firmware runs the ADC a bit faster to keep tighter control of the tip temperature. Normally this wont cause an issue as the output from the TMP36 is powerful enough to keep up without any issue. But if you have a weak or cold solder joint this could cause issues. If the CHan is extremely high, and reflowing the temperature sensor does not resolve the issue; inspect the pins in the main MCU, possibly try giving them a light squeeze to the board while watching CHan. If you have a different device, follow the same logic and locate the temperature sensor on your device.","title":"Known Hardware Issues"},{"location":"HardwareIssues/#hardware-issues","text":"While we would love everything to work perfectly, sometimes that just doesn't happen. Please do not email maintainers directly, these will generally be ignored. Keep issue discussions to GitHub issues or the discussions page so that the whole community can help and work together.","title":"Hardware Issues"},{"location":"HardwareIssues/#no-accelerometer-detected","text":"If your iron was previously working, this could be a bug (and we are very sorry). Please check the currently open and recently closed issues to check if anyone else has run into this. You can try going back to a release on the firmware to test if this is a new issue before opening an issue. If this is a new iron, also feel free to open an issue if you don't see any; a vendor could have changed the model of the accelerometer on us without warning again . In which case, support should come shortly. If your iron is new, there is a slim chance your accelerometer may be DOA and need replacement. Note this warning will only be shown the first few times until settings are reset","title":"No Accelerometer detected"},{"location":"HardwareIssues/#no-usb-pd-ic-detected","text":"Generally, this means either something went very awry in the firmware, or the chip is not answering as would normally be expected. Try rolling back to an earlier release to confirm if the issue still persists then the device may need repair. If you have some form of seller protection/support, you most likely want to reach out to this to be safe. If you don't, you can always attempt to replace the IC yourself. As of writing both the TS80P and Pinecil use the FUSB302. Note this warning will only be shown the first few times until settings are reset","title":"No USB-PD IC detected"},{"location":"HardwareIssues/#no-tip-detected","text":"If your tip is not being detected, the most likely cause is that the heater element inside the tip has been damaged from over-temperature, being dropped or bad luck. As the heater coil is part of the temperature measurement circuit neither will work if it's damaged. The best way to see if this is the case is to measure the resistance across the contacts to the tip using a multimeter. you are expecting to see measurements in the range of 4-10 ohms. Anything higher than 10 ohms is generally an issue.","title":"No tip detected"},{"location":"HardwareIssues/#iron-will-not-heat-up-and-displays-a-high-temperature","text":"Check the Rtip and CHan numbers ( see debug menu ). Extremly high CHan is suspect to a problem with the cold junction compensation temperature sensor. For Pinecil V1, inspect near U10 which is the TMP36 sensor ( see issue here ). You may be able to reflow/resolder the TMP36 chip at U10 to correct a weak solder joint. If it worked on older firmware, but not on 2.16+, weak solder joints are suspect. The newer firmware runs the ADC a bit faster to keep tighter control of the tip temperature. Normally this wont cause an issue as the output from the TMP36 is powerful enough to keep up without any issue. But if you have a weak or cold solder joint this could cause issues. If the CHan is extremely high, and reflowing the temperature sensor does not resolve the issue; inspect the pins in the main MCU, possibly try giving them a light squeeze to the board while watching CHan. If you have a different device, follow the same logic and locate the temperature sensor on your device.","title":"Iron will not heat up and displays a high temperature"},{"location":"History/","text":"Version Changes V2.19 Bug-fix Infinite Boot Logo Shutdown settings for MHP30 Accelerometer sensitivity for MHP30 Allow showing unique device ID Bug-fix chance of a power pulse at device boot Updated translations Improved documents, added features table V2.18 Support for animated bootup logo's Bootup logo's moved to their own IronOS-Meta repo New Vietnamese translation (limited due to screen size) Fixes for SC7A20 in TS80(P) Updated translations Better Instructions/documents V2.17 Big changes Indicate status of VBus for modding Pinecil (debug menu) Better hall effect sensor sensitivity adjustment (larger range with more steps) Temperature increment will \"round\" to nearest multiple of increase amount Build setup migrated to Alpine (You can now build in docker easily, and on PinePhone/PinePhonePro) -> Removed proprietary compiler for Pinecil RISCV now all uses normal gcc -> Removed using the arm specific build of gcc for the one that alpine ships (Miniware devices) Logo generator python script creates .dfu files for ease of use with Pinecil Upgrades to translations Support for new GD32103 based TS100 units turning up on the market Raw hall effect reading now shows in the Pinecil debug menu Fixed automatic orientation for newer TS80P's with the SC7 accelerometer User interface slight changes New metadata.zip file to allow the Pine Updater to automatically fetch information on releases Notes VBus mod detection may not play well with all PPS chargers. If your iron reboots when you view this in the debug menu its not a fault. ( #1226 ) metadata.zip is only designed for use by automatic software, ignore it for normal use More details on Pinecil VBus mod coming via other channels. Hall effect sensor is not fitted to Pinecil's by default, you have to fit this yourself if you want the feature Tweaks to the Accelerometer code means the drivers are slightly more fussy. If you run into any issues let us know in the discussion or issues. -> Release has been updated to build e065be3 after one bug with the BMA223 was found. V2.16 Overhaul of the Timer+ADC setup with help from @sandmanRO Overhaul of the PID with help from @sandmanRO Settings should now upgrade in place to future versions, with resets only happening to new/changed settings Shows error if tip runaway (failed temperature sensor) is detected USB-PD now has a timeout, to allow forcing QC3 negotiation to start faster QC3 Voltages are now adjustable to user desired setpoint Added a small tolerance to allow \"overvoltage\" on QC3 above unit specifications. Please note: Doing this is entirely at your own risk! New Advanced view that is much nicer to use and a very good daily driver option from @Mel-kior OLED brightness and contrast thanks to @alvinhochun Scrollbar is fixed so it doesnt jump around when menus are shown/hidden Moved to .dfu files from .bin to make flashing commands easier Every language had translation updates I believe Romanian language added V2.15 Feature upgrades: MHP30 support Multi-lingual firmware combinations now exist for Pinecil More fine grained voltage controlled options USB-PD improvements (version one and two) More configuration options for power pulse All font / character encoding has been very reworked More translation updates than one can count More languages \ud83d\ude31 MHP30 The MHP30 is a small reflow station from Miniware. Thanks to a massive amount of help from @g3gg0 this firmware brings the beginnings of support for this unit. Also kudo's to @Vinigas and @GoJian for helping with testing. This is not a final version I'm sure, but this is a working, usable version of firmware support. Programs the same as any one Miniware unit using drag and drop. Note: The boot logo scripts will need updates for this unit, so not supported yet. The flood doors are now open for feature requests for this unit :) V2.14 Fixing auto rotation bug in the LIS accelerometer in the TS80/TS80P Adds support for two new accelerometers -- SC7A20 (Future Pinecil batch) #786 -- MSA301 (Newer TS80P) #761 Add warnings if accelerometer or USB-PD IC's are not detected #752 -- Only shows for first few boots, to help catch unsupported models Fixed cooling down blink to be sane speed #769 Cleanup of threads and slightly faster power negotiation #790 Updates to flashing scripts #775 Documentation updates all over the place (and the wiki was given a cleanup)| Updates to makefile #792 #787 Cleanup the folder name of the source code #800 clang-format spec setup #801 V2.13 First official Pinecil release All of the wire for Pinecil releases added Updated Translations Delay accelerometer to help with entering sleep on startup Dual speed PWM to help with power limit control Improve heat up time Adds locking mode Improved docs all over the place Repo rename occured TS100 -> IronOS Hall effect sensor support added (not fitted in Pinecil but optional) QC 20V support for Pinecil CI upgrades for faster builds Fixed bug with accelerometer model on Pinecil Rework of all of the temperature curves for better accuracy V2.12 Only released as pre-release [TS80P] Improvements to the PD negotiation to handle a few more adapters cleanly Pause on the last item in a list Clean up the menu (removed both enables and settings, so that you can turn things off easier) Removing the very old single line menu style. V2.11 First TS80P support Added in a USB-PD driver stack for the FUSB302 Fixed some graphical glitches V2.10 GUI polish (animations and scroll bars) Power pulse to keep power supplies alive Adjustable tip response gain V2.09 Adjustable steps in temperature adjustment Git hash now in build string Adjustable language to set if US units are available or not Some minor QC3 improvements V2.08 Fixes auto start in sleep mode Power limiters V2.07 QC fixes Cosmetic fixes for leading 0's V2.06 Warning on settings reset Temp temp re-write Display calibration offset Hide some leading 0's Menu timeouts V2.05 Language updates V2.04 GUI updates V2.03 Support for new accelerometers V2.02 Adds small font V2.01 Newer settings menu V2.00 Complete re-write of the low layer system to use the STM32 HAL for easier development This allowed easier setup for the new ADC auto measuring system Better tip PWM control Moved to FreeRTOS for scheduling Complete re-write from blank Added detailed screen views Added smaller font for said screen views V1.17 Added blinking cooldown display Allowed smaller sleep timeout values New font! Automatic startup option V1.16 Added automatic rotation support Added power display graph V1.15 Added support for a custom bootup logo to be programmed via the DFU bootloader V1.14 Changed input voltage cutoff to be based on cell count rather than voltage V1.13 Swapped buttons for menu to prevent accidentally changing first menu item Added auto key repeat V1.12 Increases sensitivity options to be 1*9 with 0 off state Fixes issue where going from COOL *> soldering can leave screen off V1.11 Boost mode Change sensitivity options to be 1*8 V1.10 Adds help text to settings Improves settings for the display update rate V1.09 Adds display modes, for slowing down or simplifying the display V1.08 Fix settings menu not showing flip display V1.07 Adds shutdown time to automatically shutdown the iron after inactivity V1.06 Changes H and C when the iron is heating to the minidso chevron like images V1.05 Adds ability to calibrate the input voltage measurement V1.04 Increased accuracy of the temperature control Improved PID response slightly Allows temperature offset calibration Nicer idle screen V1.03 Improved Button handling Ability to set motion sensitivity DC voltmeter page shows input voltage V1.02 Adds hold both buttons on IDLE to access the therometer mode Changes the exit soldering mode to be holding both buttons (Like original firmware)","title":"Version Changes"},{"location":"History/#version-changes","text":"","title":"Version Changes"},{"location":"History/#v219","text":"Bug-fix Infinite Boot Logo Shutdown settings for MHP30 Accelerometer sensitivity for MHP30 Allow showing unique device ID Bug-fix chance of a power pulse at device boot Updated translations Improved documents, added features table","title":"V2.19"},{"location":"History/#v218","text":"Support for animated bootup logo's Bootup logo's moved to their own IronOS-Meta repo New Vietnamese translation (limited due to screen size) Fixes for SC7A20 in TS80(P) Updated translations Better Instructions/documents","title":"V2.18"},{"location":"History/#v217","text":"","title":"V2.17"},{"location":"History/#big-changes","text":"Indicate status of VBus for modding Pinecil (debug menu) Better hall effect sensor sensitivity adjustment (larger range with more steps) Temperature increment will \"round\" to nearest multiple of increase amount Build setup migrated to Alpine (You can now build in docker easily, and on PinePhone/PinePhonePro) -> Removed proprietary compiler for Pinecil RISCV now all uses normal gcc -> Removed using the arm specific build of gcc for the one that alpine ships (Miniware devices) Logo generator python script creates .dfu files for ease of use with Pinecil Upgrades to translations Support for new GD32103 based TS100 units turning up on the market Raw hall effect reading now shows in the Pinecil debug menu Fixed automatic orientation for newer TS80P's with the SC7 accelerometer User interface slight changes New metadata.zip file to allow the Pine Updater to automatically fetch information on releases","title":"Big changes"},{"location":"History/#notes","text":"VBus mod detection may not play well with all PPS chargers. If your iron reboots when you view this in the debug menu its not a fault. ( #1226 ) metadata.zip is only designed for use by automatic software, ignore it for normal use More details on Pinecil VBus mod coming via other channels. Hall effect sensor is not fitted to Pinecil's by default, you have to fit this yourself if you want the feature Tweaks to the Accelerometer code means the drivers are slightly more fussy. If you run into any issues let us know in the discussion or issues. -> Release has been updated to build e065be3 after one bug with the BMA223 was found.","title":"Notes"},{"location":"History/#v216","text":"Overhaul of the Timer+ADC setup with help from @sandmanRO Overhaul of the PID with help from @sandmanRO Settings should now upgrade in place to future versions, with resets only happening to new/changed settings Shows error if tip runaway (failed temperature sensor) is detected USB-PD now has a timeout, to allow forcing QC3 negotiation to start faster QC3 Voltages are now adjustable to user desired setpoint Added a small tolerance to allow \"overvoltage\" on QC3 above unit specifications. Please note: Doing this is entirely at your own risk! New Advanced view that is much nicer to use and a very good daily driver option from @Mel-kior OLED brightness and contrast thanks to @alvinhochun Scrollbar is fixed so it doesnt jump around when menus are shown/hidden Moved to .dfu files from .bin to make flashing commands easier Every language had translation updates I believe Romanian language added","title":"V2.16"},{"location":"History/#v215","text":"","title":"V2.15"},{"location":"History/#feature-upgrades","text":"MHP30 support Multi-lingual firmware combinations now exist for Pinecil More fine grained voltage controlled options USB-PD improvements (version one and two) More configuration options for power pulse All font / character encoding has been very reworked More translation updates than one can count More languages \ud83d\ude31","title":"Feature upgrades:"},{"location":"History/#mhp30","text":"The MHP30 is a small reflow station from Miniware. Thanks to a massive amount of help from @g3gg0 this firmware brings the beginnings of support for this unit. Also kudo's to @Vinigas and @GoJian for helping with testing. This is not a final version I'm sure, but this is a working, usable version of firmware support. Programs the same as any one Miniware unit using drag and drop. Note: The boot logo scripts will need updates for this unit, so not supported yet. The flood doors are now open for feature requests for this unit :)","title":"MHP30"},{"location":"History/#v214","text":"Fixing auto rotation bug in the LIS accelerometer in the TS80/TS80P Adds support for two new accelerometers -- SC7A20 (Future Pinecil batch) #786 -- MSA301 (Newer TS80P) #761 Add warnings if accelerometer or USB-PD IC's are not detected #752 -- Only shows for first few boots, to help catch unsupported models Fixed cooling down blink to be sane speed #769 Cleanup of threads and slightly faster power negotiation #790 Updates to flashing scripts #775 Documentation updates all over the place (and the wiki was given a cleanup)| Updates to makefile #792 #787 Cleanup the folder name of the source code #800 clang-format spec setup #801","title":"V2.14"},{"location":"History/#v213","text":"First official Pinecil release All of the wire for Pinecil releases added Updated Translations Delay accelerometer to help with entering sleep on startup Dual speed PWM to help with power limit control Improve heat up time Adds locking mode Improved docs all over the place Repo rename occured TS100 -> IronOS Hall effect sensor support added (not fitted in Pinecil but optional) QC 20V support for Pinecil CI upgrades for faster builds Fixed bug with accelerometer model on Pinecil Rework of all of the temperature curves for better accuracy","title":"V2.13"},{"location":"History/#v212","text":"Only released as pre-release [TS80P] Improvements to the PD negotiation to handle a few more adapters cleanly Pause on the last item in a list Clean up the menu (removed both enables and settings, so that you can turn things off easier) Removing the very old single line menu style.","title":"V2.12"},{"location":"History/#v211","text":"First TS80P support Added in a USB-PD driver stack for the FUSB302 Fixed some graphical glitches","title":"V2.11"},{"location":"History/#v210","text":"GUI polish (animations and scroll bars) Power pulse to keep power supplies alive Adjustable tip response gain","title":"V2.10"},{"location":"History/#v209","text":"Adjustable steps in temperature adjustment Git hash now in build string Adjustable language to set if US units are available or not Some minor QC3 improvements","title":"V2.09"},{"location":"History/#v208","text":"Fixes auto start in sleep mode Power limiters","title":"V2.08"},{"location":"History/#v207","text":"QC fixes Cosmetic fixes for leading 0's","title":"V2.07"},{"location":"History/#v206","text":"Warning on settings reset Temp temp re-write Display calibration offset Hide some leading 0's Menu timeouts","title":"V2.06"},{"location":"History/#v205","text":"Language updates","title":"V2.05"},{"location":"History/#v204","text":"GUI updates","title":"V2.04"},{"location":"History/#v203","text":"Support for new accelerometers","title":"V2.03"},{"location":"History/#v202","text":"Adds small font","title":"V2.02"},{"location":"History/#v201","text":"Newer settings menu","title":"V2.01"},{"location":"History/#v200","text":"Complete re-write of the low layer system to use the STM32 HAL for easier development This allowed easier setup for the new ADC auto measuring system Better tip PWM control Moved to FreeRTOS for scheduling Complete re-write from blank Added detailed screen views Added smaller font for said screen views","title":"V2.00"},{"location":"History/#v117","text":"Added blinking cooldown display Allowed smaller sleep timeout values New font! Automatic startup option","title":"V1.17"},{"location":"History/#v116","text":"Added automatic rotation support Added power display graph","title":"V1.16"},{"location":"History/#v115","text":"Added support for a custom bootup logo to be programmed via the DFU bootloader","title":"V1.15"},{"location":"History/#v114","text":"Changed input voltage cutoff to be based on cell count rather than voltage","title":"V1.14"},{"location":"History/#v113","text":"Swapped buttons for menu to prevent accidentally changing first menu item Added auto key repeat","title":"V1.13"},{"location":"History/#v112","text":"Increases sensitivity options to be 1*9 with 0 off state Fixes issue where going from COOL *> soldering can leave screen off","title":"V1.12"},{"location":"History/#v111","text":"Boost mode Change sensitivity options to be 1*8","title":"V1.11"},{"location":"History/#v110","text":"Adds help text to settings Improves settings for the display update rate","title":"V1.10"},{"location":"History/#v109","text":"Adds display modes, for slowing down or simplifying the display","title":"V1.09"},{"location":"History/#v108","text":"Fix settings menu not showing flip display","title":"V1.08"},{"location":"History/#v107","text":"Adds shutdown time to automatically shutdown the iron after inactivity","title":"V1.07"},{"location":"History/#v106","text":"Changes H and C when the iron is heating to the minidso chevron like images","title":"V1.06"},{"location":"History/#v105","text":"Adds ability to calibrate the input voltage measurement","title":"V1.05"},{"location":"History/#v104","text":"Increased accuracy of the temperature control Improved PID response slightly Allows temperature offset calibration Nicer idle screen","title":"V1.04"},{"location":"History/#v103","text":"Improved Button handling Ability to set motion sensitivity DC voltmeter page shows input voltage","title":"V1.03"},{"location":"History/#v102","text":"Adds hold both buttons on IDLE to access the therometer mode Changes the exit soldering mode to be holding both buttons (Like original firmware)","title":"V1.02"},{"location":"Logo/","text":"Startup Logos This firmware supports a user created bootup logo. By default, there is not one included in the firmware. This means that once flashed they generally stay. If you want no logo again, you would have to flash a blank image to the bootup logo. Generating the Logo files There are community logo's already converted and ready to use in IronOS-Meta/releases . Download the zip for Pinecil or Miniware and then install using the instructions in the Flashing section below. If you want to make custom art then it needs to be converted with a Python script. The script and other needed files are in IronOS-Meta . Go to that folder, then it is easiest to select the green Code button (upper right), then Download Zip. This way you get all the files you need and some extras. You only need what is inside Boot Logos. Put your custom image inside the Boot Logos folder with all python script files already there. The Python script converts an image passed into it on the command line into both a .hex file and a .dfu to be uploaded to the iron in DFU mode. The image can be in color and any size, but it will be resized and converted to 1-bit color. However, it looks best if you create a 96x16 image (Png or Bmp) in any image editor and color the pixels black & white manually. The converter requires at least Python3 and Pillow apps. Follow online instructions for installing Python and Pillow. For Windows, it is recommended to use Windows PowerShell instead of Command. Open Powershell (run as administrator), type python to install it, it will open microsoft store where you can install it free. Go back to Powershell and install Pillow. What works can vary, but this command may work: python -m pip install Pillow or python3 -m pip install pillow If the above does not work, see this page on StackOverflow about installing Pillow. Now that Python and Pillow are successfuly installed, you can convert an image. Go back to Powershell and type this command (change infile.png to the name of your image): python img2logo.py infile.png out -m for Miniware python img2logo.py infile.png out -p for Pinecil Run python img2logo.py --help to see available options. Replace the word python with python3 if you have multiple versions of python installed. Note: make sure your image file is in the same folder as script files (img2logo.py, output_dfu.py, output_hex.py). Flashing the Logo Miniware (TS100/TS80/TS80P) Upload the HEX file to the iron in DFU mode and, if the file's extension changes to .RDY, your custom splash screen should show up on startup. You perform this the same way as if you were flashing a new firmware, and all the existing notes around this apply. If you have flashed the IronOS-dfu alternative bootloader, you should use the .dfu files instead Pinecil V1 For Pinecil V1, we require using dfu-util to flash the logo art (Pinecil does not use hex). Pine64 Updater is the easiest way to load the Bootup logo onto Pinecil as it already includes the necessary DFU library. Connect Pinecil to a PC, and open the Updater the same as updating firmware. Select Custom > Browse to the DFU image file you just made > Update to install. The bootup logo is stored in a separate location than the IronOS firmware and you do not have to worry about it changing or breaking the IronOS. You could also use dfu-util and use Command line to install it. dfu-util -D logo_file.dfu","title":"Startup Logo"},{"location":"Logo/#startup-logos","text":"This firmware supports a user created bootup logo. By default, there is not one included in the firmware. This means that once flashed they generally stay. If you want no logo again, you would have to flash a blank image to the bootup logo.","title":"Startup Logos"},{"location":"Logo/#generating-the-logo-files","text":"There are community logo's already converted and ready to use in IronOS-Meta/releases . Download the zip for Pinecil or Miniware and then install using the instructions in the Flashing section below. If you want to make custom art then it needs to be converted with a Python script. The script and other needed files are in IronOS-Meta . Go to that folder, then it is easiest to select the green Code button (upper right), then Download Zip. This way you get all the files you need and some extras. You only need what is inside Boot Logos. Put your custom image inside the Boot Logos folder with all python script files already there. The Python script converts an image passed into it on the command line into both a .hex file and a .dfu to be uploaded to the iron in DFU mode. The image can be in color and any size, but it will be resized and converted to 1-bit color. However, it looks best if you create a 96x16 image (Png or Bmp) in any image editor and color the pixels black & white manually. The converter requires at least Python3 and Pillow apps. Follow online instructions for installing Python and Pillow. For Windows, it is recommended to use Windows PowerShell instead of Command. Open Powershell (run as administrator), type python to install it, it will open microsoft store where you can install it free. Go back to Powershell and install Pillow. What works can vary, but this command may work: python -m pip install Pillow or python3 -m pip install pillow If the above does not work, see this page on StackOverflow about installing Pillow. Now that Python and Pillow are successfuly installed, you can convert an image. Go back to Powershell and type this command (change infile.png to the name of your image): python img2logo.py infile.png out -m for Miniware python img2logo.py infile.png out -p for Pinecil Run python img2logo.py --help to see available options. Replace the word python with python3 if you have multiple versions of python installed. Note: make sure your image file is in the same folder as script files (img2logo.py, output_dfu.py, output_hex.py).","title":"Generating the Logo files"},{"location":"Logo/#flashing-the-logo","text":"","title":"Flashing the Logo"},{"location":"Logo/#miniware-ts100ts80ts80p","text":"Upload the HEX file to the iron in DFU mode and, if the file's extension changes to .RDY, your custom splash screen should show up on startup. You perform this the same way as if you were flashing a new firmware, and all the existing notes around this apply. If you have flashed the IronOS-dfu alternative bootloader, you should use the .dfu files instead","title":"Miniware (TS100/TS80/TS80P)"},{"location":"Logo/#pinecil-v1","text":"For Pinecil V1, we require using dfu-util to flash the logo art (Pinecil does not use hex). Pine64 Updater is the easiest way to load the Bootup logo onto Pinecil as it already includes the necessary DFU library. Connect Pinecil to a PC, and open the Updater the same as updating firmware. Select Custom > Browse to the DFU image file you just made > Update to install. The bootup logo is stored in a separate location than the IronOS firmware and you do not have to worry about it changing or breaking the IronOS. You could also use dfu-util and use Command line to install it. dfu-util -D logo_file.dfu","title":"Pinecil V1"},{"location":"Menu/","text":"Menu System In this firmware for these soldering irons, all settings are adjustable on the device itself. This means a computer is not required to change any setting. Soldering mode In this mode the iron works as you would expect, pressing either button will take you to a temperature change screen. - Use each button to go up/down in temperature. Pressing both buttons exits the temperature menu (or wait 3 seconds and it will time out). - Pressing both buttons or holding the rear button ( -/B ) will exit Soldering Mode. - Holding the front button ( +/A ) will enter Boost mode (if enabled). Settings mode This mode allows you to cycle through all the options and set custom values. The menu is arranged so that the most often used settings are first. The rear button ( -/B ) cycles through the main options. (declines i.e. Additional warning to proceed.) The front button ( +/A ) either enters a submenu or changes the selected option. (accepts i.e. Additional warning to proceed.) If the device is unplugged before exiting the main menu settings will not be saved. To exit the menu, either continue to press ( -/B ) or hold it until the idle screen is reached. Alternatively, you could press ( -/A ) & ( -/B ) simultaneously to exit the submenu and once more to exit the main menu. If you idle on a setting (i.e., don't press any buttons), after 3 seconds, the screen scrolls a brief description (mini help guide). Enter submenus using the front button ( +/A ) if you are going to change it or wish to view it. Scrolling through the all options of a submenu will return you back to its entry location. Calibrating input voltage Due to the tolerance on the resistors used for the input voltage divider, some irons can be up to 0.6 V out on the voltage measurement. Please calibrate your iron if you have any issues with the cutoff voltage. This calibration is not required if you have no issues. Note that cutoff messages can also be triggered by using a power supply that is too weak and fails under the load of the iron. To calibrate your iron: Measure the input voltage with a multimeter and note it down. Connect the input to your iron. Enter the settings menu Under the Advanced submenu Select the calibrate voltage option Use the front and back buttons to adjust the displayed voltage to minimize the error to your original measurement Press both buttons at the same time to Save and Exit to the menu Calibrate Tip CJC This performs a Tip Cold Junction Calibration (CJC) ( see Temperature for details ). This is normally not needed unless you have an issue with tip temperature or your tips are wearing out prematurely. Changing tip lengths does not necessarily mean a calibration is needed. Check first that your tips are not defective, and measured resistance is close to specifications (Pinecil/TS100 short tips 6.2 \u03a9, long tips 8 \u03a9, TS80(P) ~4.5 \u03a9). What this is for: some tips have an offset on their readings which causes issues, i.e., the actual temperature of the tip is much higher than displayed. To calibrate this out, perform the following steps. Caution: if the method below is not followed, the iron could be worse than before calibration. If you need to repeat the method, first unplug and let the handle/PCB cool down to room temperature. Connect power to your device. Go to Advanced Settings using ( -/B ) and press ( +/A ) to select it. Use ( -/B ) to scroll to Calibrate CJC at next boot and confirm with ( +/A ). Accept the 'warning text' with ( +/A ). Exit the settings menu as usual by pressing and holding ( -/B ). Unplug you device. Critical: Make sure a tip is attached & wait until the tip & handle are at room temperature. (Wait a reasonable amount of time after having used the device.) Power the device and ideally keep it out of your hands (You know it might get warm.). The display shows .... for a short time while the device measures and compares the tip and handle voltages. As a result the new Offset value is displayed. This value can later be viewed in the Debug menu . Calibration is done and the device proceeds booting. Note: offsets are dependant on your tip, temperature sensor, and the MCU. It's the culmination of tolerances at rest. Typical values are 700-1000 range. This is only designed to be used at boot while cold (ambient room temperature), as temperatures drift apart as soon as power is connected. Doing this reading repeatedly could result in wide varience of the offset number and/or incorrect calibration. Boost mode This allows you to change the front button ( +/A ) to become a boost button when you hold it for > 2 seconds. A boost button changes the soldering temperature for short periods. For example, when soldering a big joint and you need a much higher temperature, hold the ( +/A ) button down and it will temporarily increase the temperature to your 'boost' setting. When you release the button, the temperature will gradually go back to the normal set temperature. The boost temperature is set in Soldering settings.","title":"Main Menu"},{"location":"Menu/#menu-system","text":"In this firmware for these soldering irons, all settings are adjustable on the device itself. This means a computer is not required to change any setting.","title":"Menu System"},{"location":"Menu/#soldering-mode","text":"In this mode the iron works as you would expect, pressing either button will take you to a temperature change screen. - Use each button to go up/down in temperature. Pressing both buttons exits the temperature menu (or wait 3 seconds and it will time out). - Pressing both buttons or holding the rear button ( -/B ) will exit Soldering Mode. - Holding the front button ( +/A ) will enter Boost mode (if enabled).","title":"Soldering mode"},{"location":"Menu/#settings-mode","text":"This mode allows you to cycle through all the options and set custom values. The menu is arranged so that the most often used settings are first. The rear button ( -/B ) cycles through the main options. (declines i.e. Additional warning to proceed.) The front button ( +/A ) either enters a submenu or changes the selected option. (accepts i.e. Additional warning to proceed.) If the device is unplugged before exiting the main menu settings will not be saved. To exit the menu, either continue to press ( -/B ) or hold it until the idle screen is reached. Alternatively, you could press ( -/A ) & ( -/B ) simultaneously to exit the submenu and once more to exit the main menu. If you idle on a setting (i.e., don't press any buttons), after 3 seconds, the screen scrolls a brief description (mini help guide). Enter submenus using the front button ( +/A ) if you are going to change it or wish to view it. Scrolling through the all options of a submenu will return you back to its entry location.","title":"Settings mode"},{"location":"Menu/#calibrating-input-voltage","text":"Due to the tolerance on the resistors used for the input voltage divider, some irons can be up to 0.6 V out on the voltage measurement. Please calibrate your iron if you have any issues with the cutoff voltage. This calibration is not required if you have no issues. Note that cutoff messages can also be triggered by using a power supply that is too weak and fails under the load of the iron. To calibrate your iron: Measure the input voltage with a multimeter and note it down. Connect the input to your iron. Enter the settings menu Under the Advanced submenu Select the calibrate voltage option Use the front and back buttons to adjust the displayed voltage to minimize the error to your original measurement Press both buttons at the same time to Save and Exit to the menu","title":"Calibrating input voltage"},{"location":"Menu/#calibrate-tip-cjc","text":"This performs a Tip Cold Junction Calibration (CJC) ( see Temperature for details ). This is normally not needed unless you have an issue with tip temperature or your tips are wearing out prematurely. Changing tip lengths does not necessarily mean a calibration is needed. Check first that your tips are not defective, and measured resistance is close to specifications (Pinecil/TS100 short tips 6.2 \u03a9, long tips 8 \u03a9, TS80(P) ~4.5 \u03a9). What this is for: some tips have an offset on their readings which causes issues, i.e., the actual temperature of the tip is much higher than displayed. To calibrate this out, perform the following steps. Caution: if the method below is not followed, the iron could be worse than before calibration. If you need to repeat the method, first unplug and let the handle/PCB cool down to room temperature. Connect power to your device. Go to Advanced Settings using ( -/B ) and press ( +/A ) to select it. Use ( -/B ) to scroll to Calibrate CJC at next boot and confirm with ( +/A ). Accept the 'warning text' with ( +/A ). Exit the settings menu as usual by pressing and holding ( -/B ). Unplug you device. Critical: Make sure a tip is attached & wait until the tip & handle are at room temperature. (Wait a reasonable amount of time after having used the device.) Power the device and ideally keep it out of your hands (You know it might get warm.). The display shows .... for a short time while the device measures and compares the tip and handle voltages. As a result the new Offset value is displayed. This value can later be viewed in the Debug menu . Calibration is done and the device proceeds booting. Note: offsets are dependant on your tip, temperature sensor, and the MCU. It's the culmination of tolerances at rest. Typical values are 700-1000 range. This is only designed to be used at boot while cold (ambient room temperature), as temperatures drift apart as soon as power is connected. Doing this reading repeatedly could result in wide varience of the offset number and/or incorrect calibration.","title":"Calibrate Tip CJC"},{"location":"Menu/#boost-mode","text":"This allows you to change the front button ( +/A ) to become a boost button when you hold it for > 2 seconds. A boost button changes the soldering temperature for short periods. For example, when soldering a big joint and you need a much higher temperature, hold the ( +/A ) button down and it will temporarily increase the temperature to your 'boost' setting. When you release the button, the temperature will gradually go back to the normal set temperature. The boost temperature is set in Soldering settings.","title":"Boost mode"},{"location":"Power/","text":"Power & Performance All of the irons are PWM controlled resistive heating elements. This means that the electronics in the handle can only turn the heating element on and off. This means that the power provided in the tip is 100% controlled by the supply voltage used (higher voltage PSU = higher performance). Irons at their simplest are just a resistor (\u03a9) connected to your power source via a switch. When the switch is on, the power in the resistor is: $P(watts) = V(volts) \\times\\ I(current=amps)$ Current through the resistor is: $I(amps) = V(volts) \u00f7 \u03a9 (resistance)$ Combining these gives some common equations for Power $P(watts) = V(volts) * I(amps)$ or $P = V^2 \u00f7 \u03a9$ The resistance of the tip is a fixed constant in ohms (\u03a9): - 6.2 \u03a9 Pine64 short tip - 8.0 \u03a9 TS100/Pinecil long tip - 4.5 \u03a9 TS80(P) This means the power delivered to the soldering tip is proportional to the voltage squared. Therefore the Pinecil and TS100 perform poorly when run off 12V power supplies and may issue a Thermal Runaway message (weak power supply). Use an Ohm calculator to quickly derive watts. Type Volts / Tip \u03a9 = Amps * Volts = Watts USB QC3.0 9V / 4.5 \u03a9 = 2.0A * 9V = 18W USB-C PD 12V / 4.5 \u03a9 = 3.0A * 12V = 32W USB-C PD 20V / 8.0 \u03a9 = 2.5A * 20V = 50W USB-C PD 20V / 6.2 \u03a9 = 3.2A * 20V = 64W DC Barrel 24V / 8.0 \u03a9 = 3.0A * 24V = 72W DC Barrel 24V / 6.2 \u03a9 = 3.8A * 24V = 92W EPR PD3.1 28V / 8.0 \u03a9 = 3.5A * 28V = 98W EPR PD3.1 28V / 6.2 \u03a9 = 4.5A * 28V = 126W Output Control & Regulation These soldering irons use a FET to switch the power to the soldering iron tip. This is a P-MOSFET and its controlled via a small transistor circuit, which in turn is controlled via the MCU (i.e., STM32). The MCU controls this PWM output proportional to the output from the PID control loop running in the software. To measure the tip temperature in the iron, the iron has a small op-amp connected across the terminals at the cold end of the tip. This is setup to measure the voltage across the same terminals that are used to power the tip. In order to read the very small voltage generated by the thermocouple cold junction , the iron's output must be turned off for a moment. Once the output is turned off (via the FET), the system has a recovery time as the tip capacitance discharges and the op-amp exits saturation. After this delay period, the MCU's ADC (analog-to-digital converter) samples the output of the op-amp 8 times quickly and then sets a flag to turn the PWM output back on. This enforces a small dead time in the output signal while this occurs, so there is a balance between sampling the temperature often to maintain a stable tip temperature control and sampling less often to increase the maximum power deliverable to the tip ( see Complexity of measurement ).","title":"Power"},{"location":"Power/#power-performance","text":"All of the irons are PWM controlled resistive heating elements. This means that the electronics in the handle can only turn the heating element on and off. This means that the power provided in the tip is 100% controlled by the supply voltage used (higher voltage PSU = higher performance). Irons at their simplest are just a resistor (\u03a9) connected to your power source via a switch. When the switch is on, the power in the resistor is: $P(watts) = V(volts) \\times\\ I(current=amps)$ Current through the resistor is: $I(amps) = V(volts) \u00f7 \u03a9 (resistance)$ Combining these gives some common equations for Power $P(watts) = V(volts) * I(amps)$ or $P = V^2 \u00f7 \u03a9$ The resistance of the tip is a fixed constant in ohms (\u03a9): - 6.2 \u03a9 Pine64 short tip - 8.0 \u03a9 TS100/Pinecil long tip - 4.5 \u03a9 TS80(P) This means the power delivered to the soldering tip is proportional to the voltage squared. Therefore the Pinecil and TS100 perform poorly when run off 12V power supplies and may issue a Thermal Runaway message (weak power supply).","title":"Power &amp; Performance"},{"location":"Power/#use-an-ohm-calculator-to-quickly-derive-watts","text":"Type Volts / Tip \u03a9 = Amps * Volts = Watts USB QC3.0 9V / 4.5 \u03a9 = 2.0A * 9V = 18W USB-C PD 12V / 4.5 \u03a9 = 3.0A * 12V = 32W USB-C PD 20V / 8.0 \u03a9 = 2.5A * 20V = 50W USB-C PD 20V / 6.2 \u03a9 = 3.2A * 20V = 64W DC Barrel 24V / 8.0 \u03a9 = 3.0A * 24V = 72W DC Barrel 24V / 6.2 \u03a9 = 3.8A * 24V = 92W EPR PD3.1 28V / 8.0 \u03a9 = 3.5A * 28V = 98W EPR PD3.1 28V / 6.2 \u03a9 = 4.5A * 28V = 126W","title":"Use an Ohm calculator to quickly derive watts."},{"location":"Power/#output-control-regulation","text":"These soldering irons use a FET to switch the power to the soldering iron tip. This is a P-MOSFET and its controlled via a small transistor circuit, which in turn is controlled via the MCU (i.e., STM32). The MCU controls this PWM output proportional to the output from the PID control loop running in the software. To measure the tip temperature in the iron, the iron has a small op-amp connected across the terminals at the cold end of the tip. This is setup to measure the voltage across the same terminals that are used to power the tip. In order to read the very small voltage generated by the thermocouple cold junction , the iron's output must be turned off for a moment. Once the output is turned off (via the FET), the system has a recovery time as the tip capacitance discharges and the op-amp exits saturation. After this delay period, the MCU's ADC (analog-to-digital converter) samples the output of the op-amp 8 times quickly and then sets a flag to turn the PWM output back on. This enforces a small dead time in the output signal while this occurs, so there is a balance between sampling the temperature often to maintain a stable tip temperature control and sampling less often to increase the maximum power deliverable to the tip ( see Complexity of measurement ).","title":"Output Control &amp; Regulation"},{"location":"Settings/","text":"IronOS Settings Menu The below breaks down the menu's and what each setting means. Menu Categories In the menu there are a few main categories that are used to keep the list manageable. Category: Power settings Menu for settings related to power. Main settings to do with the input voltage. Category: Soldering settings Settings for soldering mode, such as boost temps, the increment used when pressing buttons and if button locking is enabled. Category: Sleep mode Settings to do with power saving, such as sleep mode, sleep temps, and shutdown modes. Category: User interface User interface related settings, such as units. Category: Advanced settings Advanced settings. Misc catchall for settings that don't fit anywhere else or settings that require some thought before use. Settings These are all of the settings possible in the menu. Not all settings are visible for all devices. For example, the TS100 does not have USB-PD settings. When using the device, if unsure you can pause (press nothing) on a setting and after a short delay help text will scroll across the screen. This is the \"on device help text\". Setting: Power source When the device is powered by a battery, this adjusts the low voltage threshold for when the unit should turn off the heater to protect the battery. On device help text: Set cutoff voltage to prevent battery over-drain. (DC 10V) (S=3.3V per cell, disable PWR limit) Setting: Sleep temp Temperature the device will drop down to while asleep. Typically around halfway between off and soldering temperature. On device help text: Tip temperature while in \"sleep mode\" Setting: Sleep timeout How long of a period without movement / button-pressing is required before the device drops down to the sleep temperature. On device help text: Interval before \"sleep mode\" starts (s=seconds | m=minutes) Setting: Shutdown timeout How long of a period without movement / button-pressing is required before the device turns off the tip heater completely and returns to the main idle screen. On device help text: Interval before the iron shuts down (m=minutes) Setting: Motion sensitivity Scale of how sensitive the device is to movement. Higher numbers == more sensitive. 0 == motion detection turned off. On device help text: 0=off | 1=least sensitive | ... | 9=most sensitive Setting: Temperature unit If the device shows temperatures in \u00b0C or \u00b0F. On device help text: C=Celsius | F=Fahrenheit Setting: Detailed idle screen Should the device show an 'advanced' view on the idle screen. The advanced view uses text to show more details than the typical icons. On device help text: Display detailed info in a smaller font on idle screen Setting: Display orientation If the display should rotate automatically or if it should be fixed for left- or right-handed mode. On device help text: R=right-handed | L=left-handed | A=automatic Setting: Boost temp When the unit is in soldering mode. You can hold down the button at the front of the device to temporarily override the soldering temperature to this value. This SETS the temperature, it does not ADD to it. On device help text: Tip temperature used in \"boost mode\" Setting: Start-up behavior When the device powers up, should it enter into a special mode. These settings set it to either start into soldering mode, sleeping mode or auto mode (Enters into soldering mode on the first movement). On device help text: O=off | S=heat to soldering temp | Z=standby at sleep temp until moved | R=standby, heat-off until moved Setting: Cooldown flashing If the idle screen should blink the tip temperature for attention while the tip is over 50\u00b0C. Intended as a 'tip is still hot' warning. On device help text: Flash temperature reading at idle if tip is hot Setting: Calibrate CJC at next boot Note: If the difference between the target temperature and the measured temperature is less than 5\u00b0C, calibration is NOT required at all . This is used to calibrate the offset between ADC and Op-amp of the tip at next boot (Ideally it has to be done at boot, before internal components get warm.). If the checkbox is set, the calibration will only be performed at the next boot. After a successful calibration the checkbox will be unchecked again! If you need to repeat the calibration however, you have to set the checkbox again , unplug your device and let it cool down to room/ambient temperature & power it up, ideally while it sits on the desk. Also, the calibration will only take place if both of the following conditions are met: - The tip must be installed. - The temperature difference between tip and handle must be less than 10\u00b0C. (~ ambient / room temperature) Otherwise, the calibration will be performed the next time the device is started and both conditions are met, unless the corresponding checkbox is unchecked. Hence, never repeat the calibration in quick succession! On device help text: Calibrate tip Cold Junction Compensation at the next boot (not required if Delta T is < 5\u00b0C) Setting: Restore default settings Resets all settings and calibrations to factory defaults. Does NOT erase custom user boot up logo's. On device help text: Reset default settings for this firmware ver. Setting: Calibrate input voltage Enters an adjustment mode where you can gradually adjust the measured voltage to compensate for any unit-to-unit variance in the voltage sense resistors. On device help text: Start VIN calibration (long press to exit) Setting: Detailed solder screen Should the device show an 'advanced' soldering view. This is a text-based view that shows more information at the cost of no nice graphics. On device help text: Display detailed info in a smaller font on soldering screen Setting: Scrolling speed How fast the description text scrolls when hovering on a menu. Faster speeds may induce tearing, but allow reading the whole description faster. On device help text: Speed info text scrolls past at (S=slow | F=fast) Setting: QC voltage This adjusts the maximum voltage the QC negotiation will adjust to. Does NOT affect USB-PD. Should be set safely based on the current rating of your power supply. On device help text: Max QC voltage the iron should negotiate for Setting: PD timeout How long until firmware stops trying to negotiate for USB-PD and tries QC instead. Longer times may help dodgy / old PD adapters, faster times move onto PD quickly. Units of 100ms. Recommended to keep small values. On device help text: PD negotiation timeout in 100ms steps for compatibility with some QC chargers Setting: Power limit Allows setting a custom wattage for the device to aim to keep the AVERAGE power below. The unit can't control its peak power no matter how you set this. (Except for MHP30 which will regulate nicely to this). If USB-PD is in use, the limit will be set to the lower of this and the supplies advertised wattage. On device help text: Maximum power the iron can use (W=watt) Setting: Swap + - keys Swaps which button increments and decrements on temperature change screens. On device help text: Reverse assignment of buttons for temperature adjustment Setting: Temp change short Factor by which the temperature is changed with a quick press of the buttons. On device help text: Temperature-change-increment on short button press Setting: Temp change long Factor by which the temperature is changed with a hold of the buttons. On device help text: Temperature-change-increment on long button press Setting: Power pulse Enables and sets the wattage of the power pulse. Power pulse causes the device to briefly turn on the heater to draw power to avoid power banks going to sleep. On device help text: Intensity of power of keep-awake-pulse (watt) Setting: Hall sensor sensitivity If the unit has a hall effect sensor (Pinecil), this adjusts how sensitive it is at detecting a magnet to put the device into sleep mode. On device help text: Sensitivity to magnets (0=off | 1=least sensitive | ... | 9=most sensitive) Setting: Allow locking buttons If locking the buttons against accidental presses is enabled. On device help text: While soldering, hold down both buttons to toggle locking them (D=disable | B=boost mode only | F=full locking) Setting: Minimum voltage When powered by a battery, this adjusts the minimum voltage per cell before shutdown. (This is multiplied by the cell count.) On device help text: Minimum allowed voltage per battery cell (3S: 3 - 3.7V | 4-6S: 2.4 - 3.7V) Setting: Anim. loop Should the menu animations loop. Only visible if the animation speed is not set to \"Off\" On device help text: Loop icon animations in main menu Setting: Anim. speed How fast should the menu animations loop, or if they should not loop at all. On device help text: Pace of icon animations in menu (O=off | S=slow | M=medium | F=fast) Setting: Power pulse delay Adjusts the time interval between power pulses. Longer gaps reduce undesired heating of the tip, but needs to be fast enough to keep your power bank awake. On device help text: Delay before keep-awake-pulse is triggered (x 2.5s) Setting: Power pulse duration How long should the power pulse go for. Some power banks require seeing the power draw be sustained for a certain duration to keep awake. Should be kept as short as possible to avoid wasting power / undesired heating of the tip. On device help text: Keep-awake-pulse duration (x 250ms) Setting: Language: EN English Changes the device language on multi-lingual builds. On device help text: Current firmware language Setting: Screen brightness Display brightness. Higher values age the OLED faster due to burn-in. (However, it is notable that most of these screens die from other causes first.) On device help text: Adjust the OLED screen brightness Setting: Invert screen Inverts the entire OLED. On device help text: Invert the OLED screen colors Setting: Boot logo duration Sets the duration for the boot logo (s=seconds). On device help text: Set Boot logo duration (off | s=seconds | infinity)","title":"Settings"},{"location":"Settings/#ironos-settings-menu","text":"The below breaks down the menu's and what each setting means.","title":"IronOS Settings Menu"},{"location":"Settings/#menu-categories","text":"In the menu there are a few main categories that are used to keep the list manageable.","title":"Menu Categories"},{"location":"Settings/#category-power-settings","text":"Menu for settings related to power. Main settings to do with the input voltage.","title":"Category: Power settings"},{"location":"Settings/#category-soldering-settings","text":"Settings for soldering mode, such as boost temps, the increment used when pressing buttons and if button locking is enabled.","title":"Category: Soldering settings"},{"location":"Settings/#category-sleep-mode","text":"Settings to do with power saving, such as sleep mode, sleep temps, and shutdown modes.","title":"Category: Sleep mode"},{"location":"Settings/#category-user-interface","text":"User interface related settings, such as units.","title":"Category: User interface"},{"location":"Settings/#category-advanced-settings","text":"Advanced settings. Misc catchall for settings that don't fit anywhere else or settings that require some thought before use.","title":"Category: Advanced settings"},{"location":"Settings/#settings","text":"These are all of the settings possible in the menu. Not all settings are visible for all devices. For example, the TS100 does not have USB-PD settings. When using the device, if unsure you can pause (press nothing) on a setting and after a short delay help text will scroll across the screen. This is the \"on device help text\".","title":"Settings"},{"location":"Settings/#setting-power-source","text":"When the device is powered by a battery, this adjusts the low voltage threshold for when the unit should turn off the heater to protect the battery. On device help text: Set cutoff voltage to prevent battery over-drain. (DC 10V) (S=3.3V per cell, disable PWR limit)","title":"Setting: Power source"},{"location":"Settings/#setting-sleep-temp","text":"Temperature the device will drop down to while asleep. Typically around halfway between off and soldering temperature. On device help text: Tip temperature while in \"sleep mode\"","title":"Setting: Sleep temp"},{"location":"Settings/#setting-sleep-timeout","text":"How long of a period without movement / button-pressing is required before the device drops down to the sleep temperature. On device help text: Interval before \"sleep mode\" starts (s=seconds | m=minutes)","title":"Setting: Sleep timeout"},{"location":"Settings/#setting-shutdown-timeout","text":"How long of a period without movement / button-pressing is required before the device turns off the tip heater completely and returns to the main idle screen. On device help text: Interval before the iron shuts down (m=minutes)","title":"Setting: Shutdown timeout"},{"location":"Settings/#setting-motion-sensitivity","text":"Scale of how sensitive the device is to movement. Higher numbers == more sensitive. 0 == motion detection turned off. On device help text: 0=off | 1=least sensitive | ... | 9=most sensitive","title":"Setting: Motion sensitivity"},{"location":"Settings/#setting-temperature-unit","text":"If the device shows temperatures in \u00b0C or \u00b0F. On device help text: C=Celsius | F=Fahrenheit","title":"Setting: Temperature unit"},{"location":"Settings/#setting-detailed-idle-screen","text":"Should the device show an 'advanced' view on the idle screen. The advanced view uses text to show more details than the typical icons. On device help text: Display detailed info in a smaller font on idle screen","title":"Setting: Detailed idle screen"},{"location":"Settings/#setting-display-orientation","text":"If the display should rotate automatically or if it should be fixed for left- or right-handed mode. On device help text: R=right-handed | L=left-handed | A=automatic","title":"Setting: Display orientation"},{"location":"Settings/#setting-boost-temp","text":"When the unit is in soldering mode. You can hold down the button at the front of the device to temporarily override the soldering temperature to this value. This SETS the temperature, it does not ADD to it. On device help text: Tip temperature used in \"boost mode\"","title":"Setting: Boost temp"},{"location":"Settings/#setting-start-up-behavior","text":"When the device powers up, should it enter into a special mode. These settings set it to either start into soldering mode, sleeping mode or auto mode (Enters into soldering mode on the first movement). On device help text: O=off | S=heat to soldering temp | Z=standby at sleep temp until moved | R=standby, heat-off until moved","title":"Setting: Start-up behavior"},{"location":"Settings/#setting-cooldown-flashing","text":"If the idle screen should blink the tip temperature for attention while the tip is over 50\u00b0C. Intended as a 'tip is still hot' warning. On device help text: Flash temperature reading at idle if tip is hot","title":"Setting: Cooldown flashing"},{"location":"Settings/#setting-calibrate-cjc-at-next-boot","text":"Note: If the difference between the target temperature and the measured temperature is less than 5\u00b0C, calibration is NOT required at all . This is used to calibrate the offset between ADC and Op-amp of the tip at next boot (Ideally it has to be done at boot, before internal components get warm.). If the checkbox is set, the calibration will only be performed at the next boot. After a successful calibration the checkbox will be unchecked again! If you need to repeat the calibration however, you have to set the checkbox again , unplug your device and let it cool down to room/ambient temperature & power it up, ideally while it sits on the desk. Also, the calibration will only take place if both of the following conditions are met: - The tip must be installed. - The temperature difference between tip and handle must be less than 10\u00b0C. (~ ambient / room temperature) Otherwise, the calibration will be performed the next time the device is started and both conditions are met, unless the corresponding checkbox is unchecked. Hence, never repeat the calibration in quick succession! On device help text: Calibrate tip Cold Junction Compensation at the next boot (not required if Delta T is < 5\u00b0C)","title":"Setting: Calibrate CJC at next boot"},{"location":"Settings/#setting-restore-default-settings","text":"Resets all settings and calibrations to factory defaults. Does NOT erase custom user boot up logo's. On device help text: Reset default settings for this firmware ver.","title":"Setting: Restore default settings"},{"location":"Settings/#setting-calibrate-input-voltage","text":"Enters an adjustment mode where you can gradually adjust the measured voltage to compensate for any unit-to-unit variance in the voltage sense resistors. On device help text: Start VIN calibration (long press to exit)","title":"Setting: Calibrate input voltage"},{"location":"Settings/#setting-detailed-solder-screen","text":"Should the device show an 'advanced' soldering view. This is a text-based view that shows more information at the cost of no nice graphics. On device help text: Display detailed info in a smaller font on soldering screen","title":"Setting: Detailed solder screen"},{"location":"Settings/#setting-scrolling-speed","text":"How fast the description text scrolls when hovering on a menu. Faster speeds may induce tearing, but allow reading the whole description faster. On device help text: Speed info text scrolls past at (S=slow | F=fast)","title":"Setting: Scrolling speed"},{"location":"Settings/#setting-qc-voltage","text":"This adjusts the maximum voltage the QC negotiation will adjust to. Does NOT affect USB-PD. Should be set safely based on the current rating of your power supply. On device help text: Max QC voltage the iron should negotiate for","title":"Setting: QC voltage"},{"location":"Settings/#setting-pd-timeout","text":"How long until firmware stops trying to negotiate for USB-PD and tries QC instead. Longer times may help dodgy / old PD adapters, faster times move onto PD quickly. Units of 100ms. Recommended to keep small values. On device help text: PD negotiation timeout in 100ms steps for compatibility with some QC chargers","title":"Setting: PD timeout"},{"location":"Settings/#setting-power-limit","text":"Allows setting a custom wattage for the device to aim to keep the AVERAGE power below. The unit can't control its peak power no matter how you set this. (Except for MHP30 which will regulate nicely to this). If USB-PD is in use, the limit will be set to the lower of this and the supplies advertised wattage. On device help text: Maximum power the iron can use (W=watt)","title":"Setting: Power limit"},{"location":"Settings/#setting-swap-keys","text":"Swaps which button increments and decrements on temperature change screens. On device help text: Reverse assignment of buttons for temperature adjustment","title":"Setting: Swap + - keys"},{"location":"Settings/#setting-temp-change-short","text":"Factor by which the temperature is changed with a quick press of the buttons. On device help text: Temperature-change-increment on short button press","title":"Setting: Temp change short"},{"location":"Settings/#setting-temp-change-long","text":"Factor by which the temperature is changed with a hold of the buttons. On device help text: Temperature-change-increment on long button press","title":"Setting: Temp change long"},{"location":"Settings/#setting-power-pulse","text":"Enables and sets the wattage of the power pulse. Power pulse causes the device to briefly turn on the heater to draw power to avoid power banks going to sleep. On device help text: Intensity of power of keep-awake-pulse (watt)","title":"Setting: Power pulse"},{"location":"Settings/#setting-hall-sensor-sensitivity","text":"If the unit has a hall effect sensor (Pinecil), this adjusts how sensitive it is at detecting a magnet to put the device into sleep mode. On device help text: Sensitivity to magnets (0=off | 1=least sensitive | ... | 9=most sensitive)","title":"Setting: Hall sensor sensitivity"},{"location":"Settings/#setting-allow-locking-buttons","text":"If locking the buttons against accidental presses is enabled. On device help text: While soldering, hold down both buttons to toggle locking them (D=disable | B=boost mode only | F=full locking)","title":"Setting: Allow locking buttons"},{"location":"Settings/#setting-minimum-voltage","text":"When powered by a battery, this adjusts the minimum voltage per cell before shutdown. (This is multiplied by the cell count.) On device help text: Minimum allowed voltage per battery cell (3S: 3 - 3.7V | 4-6S: 2.4 - 3.7V)","title":"Setting: Minimum voltage"},{"location":"Settings/#setting-anim-loop","text":"Should the menu animations loop. Only visible if the animation speed is not set to \"Off\" On device help text: Loop icon animations in main menu","title":"Setting: Anim. loop"},{"location":"Settings/#setting-anim-speed","text":"How fast should the menu animations loop, or if they should not loop at all. On device help text: Pace of icon animations in menu (O=off | S=slow | M=medium | F=fast)","title":"Setting: Anim. speed"},{"location":"Settings/#setting-power-pulse-delay","text":"Adjusts the time interval between power pulses. Longer gaps reduce undesired heating of the tip, but needs to be fast enough to keep your power bank awake. On device help text: Delay before keep-awake-pulse is triggered (x 2.5s)","title":"Setting: Power pulse delay"},{"location":"Settings/#setting-power-pulse-duration","text":"How long should the power pulse go for. Some power banks require seeing the power draw be sustained for a certain duration to keep awake. Should be kept as short as possible to avoid wasting power / undesired heating of the tip. On device help text: Keep-awake-pulse duration (x 250ms)","title":"Setting: Power pulse duration"},{"location":"Settings/#setting-language-en-english","text":"Changes the device language on multi-lingual builds. On device help text: Current firmware language","title":"Setting: Language:  EN     English"},{"location":"Settings/#setting-screen-brightness","text":"Display brightness. Higher values age the OLED faster due to burn-in. (However, it is notable that most of these screens die from other causes first.) On device help text: Adjust the OLED screen brightness","title":"Setting: Screen brightness"},{"location":"Settings/#setting-invert-screen","text":"Inverts the entire OLED. On device help text: Invert the OLED screen colors","title":"Setting: Invert screen"},{"location":"Settings/#setting-boot-logo-duration","text":"Sets the duration for the boot logo (s=seconds). On device help text: Set Boot logo duration (off | s=seconds | infinity)","title":"Setting: Boot logo duration"},{"location":"Temperature/","text":"Tip temperature measurement The soldering irons use a modified N-type thermocouple in the tip to measure the tip temperature. This is constructed for free by using a different type of metal to join one of the rings to the heating coil. This effectively creates a free temperature sensor for very low cost and construction difficulty. The downsides of this are twofold; one, it is made using non-optimal metals and has a non-constant temperature response; and two, as this uses the same connections as the heating current, you can't measure the temperature while you are heating the tip. How a thermocouple works (brief) Thermocouples use a junction of two dissimilar metals to create a very small amount of power (microvolts). This can then be measured and used with a known transfer function to derive the temperature of the junction. This has some fairly large limitations, but it also has the benefit of being extremely cheap. Conventionally a thermocouple is created using two dissimilar metals that join, and then the other ends of these metals are terminated to copper contacts. These copper contacts are also part of the construction of the thermocouple and are referred to as the cold junction. As there are these extra two joins between the thermocouple wires and the copper; these also have properties of their own in their reactions with temperature. If the cold junction is held at 0 degrees Celsius, then their effect is considered to be null, and so they can be ignored. However, in the real world the joins to copper are often at room temperature, and as such the measured voltage from the thermocouple must be compensated to remove the influence of these joints. This process is often called cold junction compensation. Every time in the circuit there is a join between two different metals, then a small thermocouple is created, this means that every soldered connection is also one. How these irons implement the temperature reading If you analyse one of the open circuit schematics (Pinecil, TS100, TS80) they all use the same approximate formula. This consists of an op-amp that is connected directly across the heating connections to the tip, and a separate handle temperature sensor. When the iron is not heating the tip, the microcontroller uses the ADC to read the output from the op-amp. This produces a voltage that should be linear to the temperature of (tip-handle). This value is then offset compensated (to remove ADC+op-amp offsets), and then converted into a temperature delta in \u00b0C/K. This temperature delta can then be added to the handle temperature to derive the tip temperature in degrees Celsius. Depending on the construction of the tip, the lookup values used for converting the tip reading in \u00b5V into \u00b0C/K varies. It is worth noting, however, that TS100 and Pinecil tips are approximately the same as the Hakko T12 tips. (In @Ralim's testing, to within measurement error). This makes sense as the T12 tips are an excellent and cheap design for Miniware to mimic in making the TS100 in the first place. Implications of this Reading accuracy vs Heating performance tradeoff Because the tip can only be measured when the unit is not heating, the more often the tip is measured (for finer temperature control) the less time the unit can spend heating up the tip. This means that for fast heat up and fine temperature control the firmware now implements two speeds to the controller loop. During heating up the system runs fewer temperature measurements and instead allows the tip to spend more time burning power. Once the unit is up to temperature, the rate of taking temperature readings is doubled to allow for faster reaction times. Tip heat up lag time As the temperature sensor is a part of the heater coil inside of the tip (or very close by, not entirely certain); the temperature reading is of the inside of the tip, rather than the outside. The outside temperature is the most critical for the user as this is where the solder is actually melting and performing work. The PID controller in the firmware is tuned to be slightly underdamped and thus more \"jumpy\" than some people would expect. This is based on the theory that if the inside of the tip is seeing the temperature drop; the outside temperature has dropped more and so we should overcompensate until they equalise. This is why sometimes the temperature may flick around a little during use but the tip temperature itself is quite stable. The thermal mass of the tip smooths these small amounts out nicely for the user. Though seeing larger jumps on some tips than others may indicate that the tip does not have optimal internal thermal bonding between the heater coil and the tip itself. The firmware uses the theory that these irons are aimed more to the power users territory than most, so it tries to not hide the actual temperature. Some soldering iron controllers hide the actual measurement once you are within a certain tolerance of this. For example, on a digital Weller unit that Ralim has, if set to 350 \u00b0C, it will regulate to within around +/- 3\u00b0C but not indicate you are outside of the margin of error until you exceed +/- 5\u00b0C. This gives the illusion that it's holding the temperature perfectly when in actuality it's moving around as well. Given enough time (3-5 seconds) with no external cooling, the inside and outside temperatures of the tip will be equal. When testing the tip temperature accuracy try to allow time for the system to stabilise. Complexity of measurement The firmware in these irons does a best-effort of calculating an accurate temperature. As always there is a tradeoff between perfect accuracy and firmware complexity and setup. These irons are built down to a cost; expecting accuracy greater than 1% is not really an option as the voltage reference is only 1% accurate at best. So all measurements are affected by its accuracy. The low-cost chips used in the irons do not come calibrated from the factory so we do not have an internal calibration we can use to try and measure this inaccuracy. The firmware only accounts for cold junction compensation and then treats the remaining error as being a constant offset. While the error is small, it is actually composed of both a constant offset as well as an offset that is linear to the handle temperature. This offset that is linear to handle temperature is as of current not modelled into the firmware and is assumed to be constant. This is generally close enough as once the unit is in use, the handle temperature is usually within 10 \u00b0C as the components inside warm-up from use. This means that this error is \"relatively\" constant once the unit is being used. However, this can cause odd behaviour when the tip temperature ~= room temperature. It can cause some jumping and movement in the readings when attempting to control the tip to sub 100 \u00b0C. This is a known tradeoff that is made as the irons intended use case means that it will spend most of its time above 150 \u00b0C, at which point these errors are no longer the dominant error sources in the system.","title":"Temperature"},{"location":"Temperature/#tip-temperature-measurement","text":"The soldering irons use a modified N-type thermocouple in the tip to measure the tip temperature. This is constructed for free by using a different type of metal to join one of the rings to the heating coil. This effectively creates a free temperature sensor for very low cost and construction difficulty. The downsides of this are twofold; one, it is made using non-optimal metals and has a non-constant temperature response; and two, as this uses the same connections as the heating current, you can't measure the temperature while you are heating the tip.","title":"Tip temperature measurement"},{"location":"Temperature/#how-a-thermocouple-works-brief","text":"Thermocouples use a junction of two dissimilar metals to create a very small amount of power (microvolts). This can then be measured and used with a known transfer function to derive the temperature of the junction. This has some fairly large limitations, but it also has the benefit of being extremely cheap. Conventionally a thermocouple is created using two dissimilar metals that join, and then the other ends of these metals are terminated to copper contacts. These copper contacts are also part of the construction of the thermocouple and are referred to as the cold junction. As there are these extra two joins between the thermocouple wires and the copper; these also have properties of their own in their reactions with temperature. If the cold junction is held at 0 degrees Celsius, then their effect is considered to be null, and so they can be ignored. However, in the real world the joins to copper are often at room temperature, and as such the measured voltage from the thermocouple must be compensated to remove the influence of these joints. This process is often called cold junction compensation. Every time in the circuit there is a join between two different metals, then a small thermocouple is created, this means that every soldered connection is also one.","title":"How a thermocouple works (brief)"},{"location":"Temperature/#how-these-irons-implement-the-temperature-reading","text":"If you analyse one of the open circuit schematics (Pinecil, TS100, TS80) they all use the same approximate formula. This consists of an op-amp that is connected directly across the heating connections to the tip, and a separate handle temperature sensor. When the iron is not heating the tip, the microcontroller uses the ADC to read the output from the op-amp. This produces a voltage that should be linear to the temperature of (tip-handle). This value is then offset compensated (to remove ADC+op-amp offsets), and then converted into a temperature delta in \u00b0C/K. This temperature delta can then be added to the handle temperature to derive the tip temperature in degrees Celsius. Depending on the construction of the tip, the lookup values used for converting the tip reading in \u00b5V into \u00b0C/K varies. It is worth noting, however, that TS100 and Pinecil tips are approximately the same as the Hakko T12 tips. (In @Ralim's testing, to within measurement error). This makes sense as the T12 tips are an excellent and cheap design for Miniware to mimic in making the TS100 in the first place.","title":"How these irons implement the temperature reading"},{"location":"Temperature/#implications-of-this","text":"","title":"Implications of this"},{"location":"Temperature/#reading-accuracy-vs-heating-performance-tradeoff","text":"Because the tip can only be measured when the unit is not heating, the more often the tip is measured (for finer temperature control) the less time the unit can spend heating up the tip. This means that for fast heat up and fine temperature control the firmware now implements two speeds to the controller loop. During heating up the system runs fewer temperature measurements and instead allows the tip to spend more time burning power. Once the unit is up to temperature, the rate of taking temperature readings is doubled to allow for faster reaction times.","title":"Reading accuracy vs Heating performance tradeoff"},{"location":"Temperature/#tip-heat-up-lag-time","text":"As the temperature sensor is a part of the heater coil inside of the tip (or very close by, not entirely certain); the temperature reading is of the inside of the tip, rather than the outside. The outside temperature is the most critical for the user as this is where the solder is actually melting and performing work. The PID controller in the firmware is tuned to be slightly underdamped and thus more \"jumpy\" than some people would expect. This is based on the theory that if the inside of the tip is seeing the temperature drop; the outside temperature has dropped more and so we should overcompensate until they equalise. This is why sometimes the temperature may flick around a little during use but the tip temperature itself is quite stable. The thermal mass of the tip smooths these small amounts out nicely for the user. Though seeing larger jumps on some tips than others may indicate that the tip does not have optimal internal thermal bonding between the heater coil and the tip itself. The firmware uses the theory that these irons are aimed more to the power users territory than most, so it tries to not hide the actual temperature. Some soldering iron controllers hide the actual measurement once you are within a certain tolerance of this. For example, on a digital Weller unit that Ralim has, if set to 350 \u00b0C, it will regulate to within around +/- 3\u00b0C but not indicate you are outside of the margin of error until you exceed +/- 5\u00b0C. This gives the illusion that it's holding the temperature perfectly when in actuality it's moving around as well. Given enough time (3-5 seconds) with no external cooling, the inside and outside temperatures of the tip will be equal. When testing the tip temperature accuracy try to allow time for the system to stabilise.","title":"Tip heat up lag time"},{"location":"Temperature/#complexity-of-measurement","text":"The firmware in these irons does a best-effort of calculating an accurate temperature. As always there is a tradeoff between perfect accuracy and firmware complexity and setup. These irons are built down to a cost; expecting accuracy greater than 1% is not really an option as the voltage reference is only 1% accurate at best. So all measurements are affected by its accuracy. The low-cost chips used in the irons do not come calibrated from the factory so we do not have an internal calibration we can use to try and measure this inaccuracy. The firmware only accounts for cold junction compensation and then treats the remaining error as being a constant offset. While the error is small, it is actually composed of both a constant offset as well as an offset that is linear to the handle temperature. This offset that is linear to handle temperature is as of current not modelled into the firmware and is assumed to be constant. This is generally close enough as once the unit is in use, the handle temperature is usually within 10 \u00b0C as the components inside warm-up from use. This means that this error is \"relatively\" constant once the unit is being used. However, this can cause odd behaviour when the tip temperature ~= room temperature. It can cause some jumping and movement in the readings when attempting to control the tip to sub 100 \u00b0C. This is a known tradeoff that is made as the irons intended use case means that it will spend most of its time above 150 \u00b0C, at which point these errors are no longer the dominant error sources in the system.","title":"Complexity of measurement"},{"location":"Translation/","text":"Translation If you would like to contribute a translation, use the Translation Editor . Open a reference language file and optionally a target language file . You can create a pull request with the new / updated json configuration file, and this will include this language into the new builds for the firmware.","title":"Translations"},{"location":"Translation/#translation","text":"If you would like to contribute a translation, use the Translation Editor . Open a reference language file and optionally a target language file . You can create a pull request with the new / updated json configuration file, and this will include this language into the new builds for the firmware.","title":"Translation"},{"location":"Troubleshooting/","text":"Troubleshooting If your device is not operating as expected; and you are within the manufacturer support window, please first contact your manufacturer and RMA / warranty your device. If your iron is not working as expected, the Debug menu exposes internal measurements to help you narrow down the root cause of the issue. Alongside all of these, issues with the soldering of the main MCU could cause all of these as well; and should always be checked. The tip is important for the operation of your iron. T100 and Pinecil tips are around 8 ohms, and TS80(P) tips are around 4.5 ohms. You are welcome to open discussions about issues as well, or if you bought your Pinecil from an official store; use the Pinecil community chat for support. But it is helpful to do some basic diagnostics first just in case the issue is easily fixed. The VAST majority of issues are poor soldering or cold solder joints. If you can open up your iron, give it a good look at all the connection points, and use another iron to reflow any suspicious ones, this can fix most issues. High tip temp reading when the tip is cool If you are finding the tip is reading high; the first fields to check in the Debug menu are RTip and CHan . RTip is the raw tip reading in \u03bcV; at cool this should be around 700-1000 for larger tips and ~1500 for smaller tips (TS80's) CHan is the temperature of the temperature sensor on the PCB in degrees Celsius * 10. So 29 \u00b0C ambient should read as 290 RTip is out of spec RTip will over-read on bad contacts or no tip inserted. If RTip is overreading, you may have one of the following: Partially stuck on main MOSFET Slow reacting main MOSFET driver transistor Damaged Op-Amp Poor soldering on the Op-Amp circuitry No tip inserted or tip that is not connecting correctly If RTip is under-reading you most likely have issues with the Op-Amp or the tip. The signal should be pulled high by hardware (reading hot), so this often means the MCU is not reading the signal correctly. Check MCU soldering. CHan is out of spec CHan reading comes directly from the cold junction compensation temperature sensor. This is usually a TMP36 (Pinecil V1), or an NTC thermistor (MHP30, TS80P, Pinecil V2). If CHan is reading low: Check the connection from the MCU to the handle temperature sensor. Check the power pin connection on the TMP36 Check pullup resistor on the NTC thermistor Check no bridged pins or weak shorts on the signal to nearby pins on MCU or temperature sensor Reflow/resolder the aforementioned components If CHan is reading higher Check ground connections on the sensors Check no bridged pins or weak shorts on the signal to nearby pins on MCU or temperature sensor Reflow/resolder the aforementioned components No display OR dots on the display If when you power up your iron you get no display, the first test is to (carefully) attempt to heat the tip. Press the front button ( +/A ) on your device and check if the tip heats up. If the tip does not heat up, it is worth trying to reflash the firmware first in case it is corrupted. The main failure mode of the OLED display module is usually poor soldering on the OLED display cable to the main PCB. As this is soldered by hand generally, it's the most prone to failures. If you have a poor connection or a floating pin, you can end up with a state where the screen works sometimes and then freezes or only works on some power cycles. It might work on very old versions of IronOS but not the newest ones. You could try to reflow the pins for the OLED. On 96x16 screens, carefully peel it back from the adhesive and reflow the solder on the pins. If needed, replacement Oled screens are common and low cost. As the OLED runs on an I2C bus, there are pull up resistors on the SDA and SCL pins. It is worth checking these as well, while they don't often fail, issues with these can cause weird display issues. Tip heats when not in heating mode \u26a0\ufe0f DISCONNECT YOUR TIP \u26a0\ufe0f Most likely you have either a blown MOSFET or shorted pin. Check the MOSFET and also its driver transistor. The firmware will not enable the tip until you are in soldering mode. Accelerometer not detected Your Iron may have a new accelerometer that is not supported yet (happens every year or so) OR there is a soldering issue with the accelerometer (reflow/resolder).","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"If your device is not operating as expected; and you are within the manufacturer support window, please first contact your manufacturer and RMA / warranty your device. If your iron is not working as expected, the Debug menu exposes internal measurements to help you narrow down the root cause of the issue. Alongside all of these, issues with the soldering of the main MCU could cause all of these as well; and should always be checked. The tip is important for the operation of your iron. T100 and Pinecil tips are around 8 ohms, and TS80(P) tips are around 4.5 ohms. You are welcome to open discussions about issues as well, or if you bought your Pinecil from an official store; use the Pinecil community chat for support. But it is helpful to do some basic diagnostics first just in case the issue is easily fixed. The VAST majority of issues are poor soldering or cold solder joints. If you can open up your iron, give it a good look at all the connection points, and use another iron to reflow any suspicious ones, this can fix most issues.","title":"Troubleshooting"},{"location":"Troubleshooting/#high-tip-temp-reading-when-the-tip-is-cool","text":"If you are finding the tip is reading high; the first fields to check in the Debug menu are RTip and CHan . RTip is the raw tip reading in \u03bcV; at cool this should be around 700-1000 for larger tips and ~1500 for smaller tips (TS80's) CHan is the temperature of the temperature sensor on the PCB in degrees Celsius * 10. So 29 \u00b0C ambient should read as 290","title":"High tip temp reading when the tip is cool"},{"location":"Troubleshooting/#rtip-is-out-of-spec","text":"RTip will over-read on bad contacts or no tip inserted. If RTip is overreading, you may have one of the following: Partially stuck on main MOSFET Slow reacting main MOSFET driver transistor Damaged Op-Amp Poor soldering on the Op-Amp circuitry No tip inserted or tip that is not connecting correctly If RTip is under-reading you most likely have issues with the Op-Amp or the tip. The signal should be pulled high by hardware (reading hot), so this often means the MCU is not reading the signal correctly. Check MCU soldering.","title":"RTip is out of spec"},{"location":"Troubleshooting/#chan-is-out-of-spec","text":"CHan reading comes directly from the cold junction compensation temperature sensor. This is usually a TMP36 (Pinecil V1), or an NTC thermistor (MHP30, TS80P, Pinecil V2). If CHan is reading low: Check the connection from the MCU to the handle temperature sensor. Check the power pin connection on the TMP36 Check pullup resistor on the NTC thermistor Check no bridged pins or weak shorts on the signal to nearby pins on MCU or temperature sensor Reflow/resolder the aforementioned components If CHan is reading higher Check ground connections on the sensors Check no bridged pins or weak shorts on the signal to nearby pins on MCU or temperature sensor Reflow/resolder the aforementioned components","title":"CHan is out of spec"},{"location":"Troubleshooting/#no-display-or-dots-on-the-display","text":"If when you power up your iron you get no display, the first test is to (carefully) attempt to heat the tip. Press the front button ( +/A ) on your device and check if the tip heats up. If the tip does not heat up, it is worth trying to reflash the firmware first in case it is corrupted. The main failure mode of the OLED display module is usually poor soldering on the OLED display cable to the main PCB. As this is soldered by hand generally, it's the most prone to failures. If you have a poor connection or a floating pin, you can end up with a state where the screen works sometimes and then freezes or only works on some power cycles. It might work on very old versions of IronOS but not the newest ones. You could try to reflow the pins for the OLED. On 96x16 screens, carefully peel it back from the adhesive and reflow the solder on the pins. If needed, replacement Oled screens are common and low cost. As the OLED runs on an I2C bus, there are pull up resistors on the SDA and SCL pins. It is worth checking these as well, while they don't often fail, issues with these can cause weird display issues.","title":"No display OR dots on the display"},{"location":"Troubleshooting/#tip-heats-when-not-in-heating-mode","text":"\u26a0\ufe0f DISCONNECT YOUR TIP \u26a0\ufe0f Most likely you have either a blown MOSFET or shorted pin. Check the MOSFET and also its driver transistor. The firmware will not enable the tip until you are in soldering mode.","title":"Tip heats when not in heating mode"},{"location":"Troubleshooting/#accelerometer-not-detected","text":"Your Iron may have a new accelerometer that is not supported yet (happens every year or so) OR there is a soldering issue with the accelerometer (reflow/resolder).","title":"Accelerometer not detected"},{"location":"Flashing/MHP30/","text":"Flashing / Upgrading your iron Downloading source file In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below). Main release Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below Bleeding edge / latest For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file). MHP30 This is completely safe, but if it goes wrong just put the .hex file from the official website ( MHP30 onto the unit and you're back to the old firmware. Downloads for the .hex files to flash are available on the releases page. The file you want is called MHP30.zip. Inside the zip file (make sure to extract the file before flashing with it) will be a file called MHP30_{Language-Code}.hex . Officially the bootloader on the devices only works under Windows (use the built-in File Explorer, as alternative file managers or copy handlers like Teracopy will fail). However, users have reported that it does work under Mac, and can be made to work under Linux sometimes . Details over on the wiki page . Hold the button closest to the tip (MHP30 the left button on the back), and plug in the USB to the computer. The unit will appear as a USB drive. (Screen will say DFU on it.) Drag the .hex file onto the USB drive. The unit will disconnect and reconnect. The filename will have changed to end in .RDY or .ERR If it ends with .RDY you're done! Otherwise, something went wrong. If it didn't work the first time, try copying the file again without disconnecting the device, often it will work on the second shot. Disconnect the USB and power up the device. You're good to go. For the more adventurous out there, you can also load this firmware onto the device using an SWD programmer, for easier installation follow the guide at the end of this document. On the USB-C port, USB_D+ is shorted to SWDIO and USB_D- is shorted to SWCLK so debugging works without disassembly (attach while staying in the bootloader). Installing IronOS-dfu is recommended as it allows reliable flashing of binary files with dfu-util . Noting that for the MHP30 the stock firmware checks a checksum at the end of the first 8k that has to be valid or else it goes into \"demo mode\". Mac sgr1ff1n (Shane) commented in issue 11 that upgrading worked on their Mac as per normal: I just wanted to say that I was able to update the firmware on my ts100 from the stock version to 1.08 found in this repository using my Mac. I simply followed the same steps however through Finder. I have a MacBook Pro (13-inch, Mid 2012) running Sierra 10.12.4 (16E195). Linux While in the past there were reports of unreliable upgrades, the consensus in issue 11 is that things work mostly as expected in Linux. @awigen has contributed a script flash_ts100_linux.sh that works on Ubuntu 16.04 as well as other distros. If you want to do it manually (or if the script does not work for some reason) the general procedure is the same as for Windows, the differences are in the way to mount the unit and copy the firmware. Remember that after flashing, the firmware filename will have changed to end in .RDY or .ERR or .NOT and only .RDY means the flashing was successful! The unit has to be mounted as msdos type (thanks @balrog-kun for having spotted it). You may disable automount, but unmounting the automounted drive and remounting as msdos works fine. You do not need to turn off automounting, but you do need to unmount the device with umount . It is recommended to use an all-caps filename for the firmware, even if successful flashing were done with lower case names. Avoid USB hubs, plug directly in your computer. If it fails, try again several times without unplugging. Just let it remount. Example, to be run as root, once the unit has been plugged in DFU mode and auto-mounted: FW=ts100.hex unset NAME eval $(lsblk -P -p -d --output NAME,MODEL|grep \"DFU[ _]Disk\") [ -z ${NAME+x} ] && exit 1 # Could not find DFU device umount \"$NAME\" mkdir /tmp/mntdfu mount -t msdos \"$NAME\" /tmp/mntdfu cp \"$FW\" \"/tmp/mntdfu/$(basename $FW|tr a-z A-Z)\" sync umount /tmp/mntdfu rmdir /tmp/mntdfu Device will reboot and automount will rerun if not disabled. Check the extension of your firmware, it should be .RDY now. FAQ The file is showing up with the extension .ERR This can occur during the programming process if any of the checks in the bootloader fail. This is often triggered by anti-virus software or using a non-Windows host OS. First, try just copying the file a second time. Attach the iron in DFU mode. Copy the .hex file to the device. The device disconnects and connects with the .ERR file. Copy the same .hex file again \u26d4 DO NOT TRY AND DELETE THE OLD ONE \u26d4 . The device will disconnect and reconnect again. The device should now have the .RDY file. You're done. If this fails and you are on Mac or Linux reading the wiki page about programming can help. There is also a very long issue thread going through all of the different attempts around this too. If you are on Windows, it's often best to try another computer (friends, work, partners etc.). Device randomly disconnects or does not show up in DFU mode Check if the USB cable you are using has the data pins; test it on another device. There are a surprisingly large number of micro-USB cables that are power only . Try other USB ports. Often different USB controllers will interact with the units differently due to design quirks in the Miniware design. Alternative bootloader If you are an advanced user, and you have used usb-dfu tools before, or you would like to learn; there is an alternative bootloader for these irons. This will NOT show up as a USB storage drive, but instead show up using a standard DFU protocol device. You can then use dfu tools or GUIs to upgrade the iron using the .bin files that are posted to the releases page. To install this alternative bootloader, follow the instructions here . Note that this is only recommended for users who know what they are doing. If you don't understand how this works, please don't flash this.","title":"MHP30"},{"location":"Flashing/MHP30/#flashing-upgrading-your-iron","text":"","title":"Flashing / Upgrading your iron"},{"location":"Flashing/MHP30/#downloading-source-file","text":"In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below).","title":"Downloading source file"},{"location":"Flashing/MHP30/#main-release","text":"Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below","title":"Main release"},{"location":"Flashing/MHP30/#bleeding-edge-latest","text":"For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file).","title":"Bleeding edge / latest"},{"location":"Flashing/MHP30/#mhp30","text":"This is completely safe, but if it goes wrong just put the .hex file from the official website ( MHP30 onto the unit and you're back to the old firmware. Downloads for the .hex files to flash are available on the releases page. The file you want is called MHP30.zip. Inside the zip file (make sure to extract the file before flashing with it) will be a file called MHP30_{Language-Code}.hex . Officially the bootloader on the devices only works under Windows (use the built-in File Explorer, as alternative file managers or copy handlers like Teracopy will fail). However, users have reported that it does work under Mac, and can be made to work under Linux sometimes . Details over on the wiki page . Hold the button closest to the tip (MHP30 the left button on the back), and plug in the USB to the computer. The unit will appear as a USB drive. (Screen will say DFU on it.) Drag the .hex file onto the USB drive. The unit will disconnect and reconnect. The filename will have changed to end in .RDY or .ERR If it ends with .RDY you're done! Otherwise, something went wrong. If it didn't work the first time, try copying the file again without disconnecting the device, often it will work on the second shot. Disconnect the USB and power up the device. You're good to go. For the more adventurous out there, you can also load this firmware onto the device using an SWD programmer, for easier installation follow the guide at the end of this document. On the USB-C port, USB_D+ is shorted to SWDIO and USB_D- is shorted to SWCLK so debugging works without disassembly (attach while staying in the bootloader). Installing IronOS-dfu is recommended as it allows reliable flashing of binary files with dfu-util . Noting that for the MHP30 the stock firmware checks a checksum at the end of the first 8k that has to be valid or else it goes into \"demo mode\".","title":"MHP30"},{"location":"Flashing/MHP30/#mac","text":"sgr1ff1n (Shane) commented in issue 11 that upgrading worked on their Mac as per normal: I just wanted to say that I was able to update the firmware on my ts100 from the stock version to 1.08 found in this repository using my Mac. I simply followed the same steps however through Finder. I have a MacBook Pro (13-inch, Mid 2012) running Sierra 10.12.4 (16E195).","title":"Mac"},{"location":"Flashing/MHP30/#linux","text":"While in the past there were reports of unreliable upgrades, the consensus in issue 11 is that things work mostly as expected in Linux. @awigen has contributed a script flash_ts100_linux.sh that works on Ubuntu 16.04 as well as other distros. If you want to do it manually (or if the script does not work for some reason) the general procedure is the same as for Windows, the differences are in the way to mount the unit and copy the firmware. Remember that after flashing, the firmware filename will have changed to end in .RDY or .ERR or .NOT and only .RDY means the flashing was successful! The unit has to be mounted as msdos type (thanks @balrog-kun for having spotted it). You may disable automount, but unmounting the automounted drive and remounting as msdos works fine. You do not need to turn off automounting, but you do need to unmount the device with umount . It is recommended to use an all-caps filename for the firmware, even if successful flashing were done with lower case names. Avoid USB hubs, plug directly in your computer. If it fails, try again several times without unplugging. Just let it remount. Example, to be run as root, once the unit has been plugged in DFU mode and auto-mounted: FW=ts100.hex unset NAME eval $(lsblk -P -p -d --output NAME,MODEL|grep \"DFU[ _]Disk\") [ -z ${NAME+x} ] && exit 1 # Could not find DFU device umount \"$NAME\" mkdir /tmp/mntdfu mount -t msdos \"$NAME\" /tmp/mntdfu cp \"$FW\" \"/tmp/mntdfu/$(basename $FW|tr a-z A-Z)\" sync umount /tmp/mntdfu rmdir /tmp/mntdfu Device will reboot and automount will rerun if not disabled. Check the extension of your firmware, it should be .RDY now.","title":"Linux"},{"location":"Flashing/MHP30/#faq","text":"","title":"FAQ"},{"location":"Flashing/MHP30/#the-file-is-showing-up-with-the-extension-err","text":"This can occur during the programming process if any of the checks in the bootloader fail. This is often triggered by anti-virus software or using a non-Windows host OS. First, try just copying the file a second time. Attach the iron in DFU mode. Copy the .hex file to the device. The device disconnects and connects with the .ERR file. Copy the same .hex file again \u26d4 DO NOT TRY AND DELETE THE OLD ONE \u26d4 . The device will disconnect and reconnect again. The device should now have the .RDY file. You're done. If this fails and you are on Mac or Linux reading the wiki page about programming can help. There is also a very long issue thread going through all of the different attempts around this too. If you are on Windows, it's often best to try another computer (friends, work, partners etc.).","title":"The file is showing up with the extension .ERR"},{"location":"Flashing/MHP30/#device-randomly-disconnects-or-does-not-show-up-in-dfu-mode","text":"Check if the USB cable you are using has the data pins; test it on another device. There are a surprisingly large number of micro-USB cables that are power only . Try other USB ports. Often different USB controllers will interact with the units differently due to design quirks in the Miniware design.","title":"Device randomly disconnects or does not show up in DFU mode"},{"location":"Flashing/MHP30/#alternative-bootloader","text":"If you are an advanced user, and you have used usb-dfu tools before, or you would like to learn; there is an alternative bootloader for these irons. This will NOT show up as a USB storage drive, but instead show up using a standard DFU protocol device. You can then use dfu tools or GUIs to upgrade the iron using the .bin files that are posted to the releases page. To install this alternative bootloader, follow the instructions here . Note that this is only recommended for users who know what they are doing. If you don't understand how this works, please don't flash this.","title":"Alternative bootloader"},{"location":"Flashing/Pinecil%20V1/","text":"Flashing / Upgrading your iron Downloading source file In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below). Main release Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below Bleeding edge / latest For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file). Pinecil V1 The MCU used in Pinecil supports usb-dfu. Reference Pinecil Wiki . Recommended Updater: the Pine64 Updater , is an easy-to-use GUI app. It is fast and works in several types of OS, i.e. Windows/Mac. It will automatically fetch the newest stable version of IronOS from GitHub. Troubleshooting: if you have issues using the Pine64 Updater or your install fails, please go to troubleshooting tips below. Community chat: if troubleshooting doesn't work, then join the Pine64 > Pinecil channel. There are knowledgeable members in Discord/Telegram/Matrix. Discord has a bridge bot connection to Telegram and Matrix so that all pine volunteers/members can see advice for Pinecil and related items or just get tips on which Power supply to purchase. One advantage of Pinecil is that you cannot permanently damage it doing a firmware update (because DFU is in ROM); an update could render Pinecil temporarily inoperable if you flash an invalid firmware. But no worries, simply re-flashing with a working firmware copy will fix everything. USB-C cable is required to do an update. Generally, all USB controllers work, but some hubs have issues, so it is preferred to avoid USB hubs for updates. Alternate Update Methods: if your OS is not currently supported by the Updater or it does not meet your needs, i.e., you want to install a beta version, the below manual methods may be used. Linux and Mac Steps \u26d4 Do not use the DC barrel jack while updating firmware or you may destroy your PC. \u26d4 Highly recommend updating dfu-util to the newest version before starting. Download and extract the firmware package from GitHub IronOS Releases . Enter DFU mode: press and hold ( - ) button at the back of the iron before you connect the USB-C cable. Connect USB to PC, and USB-C to back of Pinecil, keep holding ( - ) button down. Once the USB cable is connected at two ends, wait ~10 seconds more, then release the ( - ) button. The screen will stay black/off to indicate the Pinecil is in DFU mode. This is normal. Using dfu-util you can flash the firmware using a command line like this: dfu-util -D Pinecil_EN.dfu Choose the file name from the folder with the appropriate 2-letter country code for your chosen language (i.e., EN = English). Troubleshooting: If you get a message stating that More than one DFU capable USB device found! when running the above command you probably have an old version of dfu-util installed. Might be worth updating. You can still install on the old version, but you will have to specify which DFU interface to flash to. Running the command dfu-util -l will show you if there are several DFU devices detected. Example: Found DFU: [28e9:0189] ver=0100, devnum=48, cfg=1, intf=0, path=\"1-1\", alt=1, name=\"@Option Bytes /0x1FFFF800/01*016Be\", serial=\"??\" Found DFU: [28e9:0189] ver=0100, devnum=48, cfg=1, intf=0, path=\"1-1\", alt=0, name=\"@Internal Flash /0x08000000/128*001Kg\", serial=\"??\" In this example we see that more than one part of the Pinecil is detected as a DFU interface and we need to specify which one we want to flash to. We want the Internal Flash so in this case we can use alt=0 to identify which interface to target. The command would then look like this: dfu-util -D Pinecil_EN.dfu -a 0 Note: if you use an older release of dfu-util and do not see alt=0, name=\"@Internal Flash /0x08000000/128*001Kg\" when running dfu-util -l you likely will not be able to update without first updating 'dfu-util'. If your update is crashing part-way into the update, there is sometimes an issue with older/fussy USB controllers (they can show up/disappear/then show up again) Try a direct connection to the USB port, do not use a USB hub, and use shorter cable. If possible, pick a port connected to the main board. Switch to a different PC/Laptop and use different ports. USB-C ports are recommended but some have also reported having a fussy C port. Hold down the (-) button for the entire firmware update, do not release until near the end. DC Low message: a pc/laptop cannot fully power Pinecil, it generally can only get 5 V (non-PD) to communicate for firmware updates and Pinecil will report 'DC Low'. This is normal. If dfu-util aborts with an error like dfu-util: Cannot open DFU device 28e9:0189 found on devnum 42 (LIBUSB_ERROR_IO) and dmesg reports USB errors like these kernel: usb 1-1: reset full-speed USB device number 42 using xhci_hcd kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: reset full-speed USB device number 42 using xhci_hcd kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: reset full-speed USB device number 42 using xhci_hcd kernel: usb 1-1: Device not responding to setup address. kernel: usb 1-1: Device not responding to setup address. kernel: usb 1-1: device not accepting address 42, error -71 then try to disable USB autosuspend. This can be done with a set of udev rules specifically for the Pinecil: udev SUBSYSTEM==\"usb\", ATTR{idVendor}==\"28e9\", ATTR{idProduct}==\"0189\", MODE:=\"0660\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"28e9\", ATTR{idProduct}==\"0189\", GROUP=\"plugdev\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"28e9\", ATTR{idProduct}==\"0189\", TEST==\"power/control\", ATTR{power/control}=\"on\" Windows Two Options for Windows Option 1: use command line Steps \u26d4 Do not use the DC barrel jack while updating firmware or you may destroy your PC. \u26d4 Using command line dfu-util is similar to above for Linux / Mac. Highly recommend updating dfu-util to the newest version. Download and extract the firmware package from GitHub IronOS Releases . Enter DFU mode: press and hold (-) button at the back of the iron (do not release). Connect USB to PC, and USB-C to the back of Pinecil, keep holding (-) button down. Screen will stay black/off to indicate the Pinecil is in DFU mode. This is normal. After the USB cable is connected at both ends, wait ~10 seconds more, then release the (-) button. Open PowerShell or Command window. Change to the directory of the unzipped firmware files Using dfu-util, flash the firmware using a command like this: dfu-util -D Pinecil_EN.dfu If you have errors, see Troubleshooting above. Option 2: use the GUI tool from chip vendor Steps \u26d4 Do not use the DC barrel jack while updating firmware or you may destroy your PC. \u26d4 If you are uncomfortable with the command line, then this chip vendor supplied GUI tool/drivers is an option. Download and extract the firmware package from GitHub IronOS Releases . Download both the GD32 MCU DFU TOOL and the GD32 Dfu Drivers . GD32 DFU Tool here . If the link breaks, search for \"GD32 MCU Dfu Tool\" at this link . GD32 DFU Drivers here . If the link breaks, search for \"GD32 Dfu Drivers\" at this link . Check properties of both downloads, tick Unblock if needed, then Unzip Install the drivers and the GD32 DFU tool (ignore prompts to update the tool). Enter DFU mode: press and hold ( - ) button at the back of Pinecil (do not release). Connect Pinecil to a PC via USB cable (do not release the ( - ) yet). Screen will stay black/off to indicate the Pinecil is in DFU mode. This is normal. You may hear a beep from Windows as it connects to Pinecil in DFU mode. If you see windows notification that it does not recognize USB device , then you didn't connect, repeat step 3-8. Open the GD32 DFU Tool (ignore prompts to update tool). At the top of the DFU tool, you should see GD DFU DEVICE 1 appear if you successfully connected Pinecil. If DFU Device box at top is blank, then Pinecil is not connected in DFU mode, repeat steps 3-11. If it has been more than 10 seconds since you connected the USB cable, Release the ( - ) button. (don't use Upload from Device section) Select Download to device > Open > Browse to folder you unzipped in step 2. Select the hex file for language. English is Pinecil_EN.hex , tick Verify after download . Click OK at bottom. After a few minutes you will see 0-100%, Download successfully! Click Leave DFU at the top. Disconnect Pinecil cable from PC, plug it into a power supply. Do not need to press any buttons, a new screen should appear. To confirm upgrade, hold the minus ( - ) button down for a few seconds, it then shows new firmware version v2.xx.x....date If you have errors, see Troubleshooting above.","title":"Pinecil V1"},{"location":"Flashing/Pinecil%20V1/#flashing-upgrading-your-iron","text":"","title":"Flashing / Upgrading your iron"},{"location":"Flashing/Pinecil%20V1/#downloading-source-file","text":"In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below).","title":"Downloading source file"},{"location":"Flashing/Pinecil%20V1/#main-release","text":"Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below","title":"Main release"},{"location":"Flashing/Pinecil%20V1/#bleeding-edge-latest","text":"For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file).","title":"Bleeding edge / latest"},{"location":"Flashing/Pinecil%20V1/#pinecil-v1","text":"The MCU used in Pinecil supports usb-dfu. Reference Pinecil Wiki . Recommended Updater: the Pine64 Updater , is an easy-to-use GUI app. It is fast and works in several types of OS, i.e. Windows/Mac. It will automatically fetch the newest stable version of IronOS from GitHub. Troubleshooting: if you have issues using the Pine64 Updater or your install fails, please go to troubleshooting tips below. Community chat: if troubleshooting doesn't work, then join the Pine64 > Pinecil channel. There are knowledgeable members in Discord/Telegram/Matrix. Discord has a bridge bot connection to Telegram and Matrix so that all pine volunteers/members can see advice for Pinecil and related items or just get tips on which Power supply to purchase. One advantage of Pinecil is that you cannot permanently damage it doing a firmware update (because DFU is in ROM); an update could render Pinecil temporarily inoperable if you flash an invalid firmware. But no worries, simply re-flashing with a working firmware copy will fix everything. USB-C cable is required to do an update. Generally, all USB controllers work, but some hubs have issues, so it is preferred to avoid USB hubs for updates. Alternate Update Methods: if your OS is not currently supported by the Updater or it does not meet your needs, i.e., you want to install a beta version, the below manual methods may be used.","title":"Pinecil V1"},{"location":"Flashing/Pinecil%20V1/#linux-and-mac","text":"","title":"Linux and Mac"},{"location":"Flashing/Pinecil%20V1/#steps","text":"\u26d4 Do not use the DC barrel jack while updating firmware or you may destroy your PC. \u26d4 Highly recommend updating dfu-util to the newest version before starting. Download and extract the firmware package from GitHub IronOS Releases . Enter DFU mode: press and hold ( - ) button at the back of the iron before you connect the USB-C cable. Connect USB to PC, and USB-C to back of Pinecil, keep holding ( - ) button down. Once the USB cable is connected at two ends, wait ~10 seconds more, then release the ( - ) button. The screen will stay black/off to indicate the Pinecil is in DFU mode. This is normal. Using dfu-util you can flash the firmware using a command line like this: dfu-util -D Pinecil_EN.dfu Choose the file name from the folder with the appropriate 2-letter country code for your chosen language (i.e., EN = English).","title":"Steps"},{"location":"Flashing/Pinecil%20V1/#troubleshooting","text":"If you get a message stating that More than one DFU capable USB device found! when running the above command you probably have an old version of dfu-util installed. Might be worth updating. You can still install on the old version, but you will have to specify which DFU interface to flash to. Running the command dfu-util -l will show you if there are several DFU devices detected. Example: Found DFU: [28e9:0189] ver=0100, devnum=48, cfg=1, intf=0, path=\"1-1\", alt=1, name=\"@Option Bytes /0x1FFFF800/01*016Be\", serial=\"??\" Found DFU: [28e9:0189] ver=0100, devnum=48, cfg=1, intf=0, path=\"1-1\", alt=0, name=\"@Internal Flash /0x08000000/128*001Kg\", serial=\"??\" In this example we see that more than one part of the Pinecil is detected as a DFU interface and we need to specify which one we want to flash to. We want the Internal Flash so in this case we can use alt=0 to identify which interface to target. The command would then look like this: dfu-util -D Pinecil_EN.dfu -a 0 Note: if you use an older release of dfu-util and do not see alt=0, name=\"@Internal Flash /0x08000000/128*001Kg\" when running dfu-util -l you likely will not be able to update without first updating 'dfu-util'. If your update is crashing part-way into the update, there is sometimes an issue with older/fussy USB controllers (they can show up/disappear/then show up again) Try a direct connection to the USB port, do not use a USB hub, and use shorter cable. If possible, pick a port connected to the main board. Switch to a different PC/Laptop and use different ports. USB-C ports are recommended but some have also reported having a fussy C port. Hold down the (-) button for the entire firmware update, do not release until near the end. DC Low message: a pc/laptop cannot fully power Pinecil, it generally can only get 5 V (non-PD) to communicate for firmware updates and Pinecil will report 'DC Low'. This is normal. If dfu-util aborts with an error like dfu-util: Cannot open DFU device 28e9:0189 found on devnum 42 (LIBUSB_ERROR_IO) and dmesg reports USB errors like these kernel: usb 1-1: reset full-speed USB device number 42 using xhci_hcd kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: reset full-speed USB device number 42 using xhci_hcd kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: device descriptor read/64, error -71 kernel: usb 1-1: reset full-speed USB device number 42 using xhci_hcd kernel: usb 1-1: Device not responding to setup address. kernel: usb 1-1: Device not responding to setup address. kernel: usb 1-1: device not accepting address 42, error -71 then try to disable USB autosuspend. This can be done with a set of udev rules specifically for the Pinecil: udev SUBSYSTEM==\"usb\", ATTR{idVendor}==\"28e9\", ATTR{idProduct}==\"0189\", MODE:=\"0660\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"28e9\", ATTR{idProduct}==\"0189\", GROUP=\"plugdev\" SUBSYSTEM==\"usb\", ATTR{idVendor}==\"28e9\", ATTR{idProduct}==\"0189\", TEST==\"power/control\", ATTR{power/control}=\"on\"","title":"Troubleshooting:"},{"location":"Flashing/Pinecil%20V1/#windows","text":"Two Options for Windows","title":"Windows"},{"location":"Flashing/Pinecil%20V1/#option-1-use-command-line","text":"","title":"Option 1: use command line"},{"location":"Flashing/Pinecil%20V1/#steps_1","text":"\u26d4 Do not use the DC barrel jack while updating firmware or you may destroy your PC. \u26d4 Using command line dfu-util is similar to above for Linux / Mac. Highly recommend updating dfu-util to the newest version. Download and extract the firmware package from GitHub IronOS Releases . Enter DFU mode: press and hold (-) button at the back of the iron (do not release). Connect USB to PC, and USB-C to the back of Pinecil, keep holding (-) button down. Screen will stay black/off to indicate the Pinecil is in DFU mode. This is normal. After the USB cable is connected at both ends, wait ~10 seconds more, then release the (-) button. Open PowerShell or Command window. Change to the directory of the unzipped firmware files Using dfu-util, flash the firmware using a command like this: dfu-util -D Pinecil_EN.dfu If you have errors, see Troubleshooting above.","title":"Steps"},{"location":"Flashing/Pinecil%20V1/#option-2-use-the-gui-tool-from-chip-vendor","text":"","title":"Option 2: use the GUI tool from chip vendor"},{"location":"Flashing/Pinecil%20V1/#steps_2","text":"\u26d4 Do not use the DC barrel jack while updating firmware or you may destroy your PC. \u26d4 If you are uncomfortable with the command line, then this chip vendor supplied GUI tool/drivers is an option. Download and extract the firmware package from GitHub IronOS Releases . Download both the GD32 MCU DFU TOOL and the GD32 Dfu Drivers . GD32 DFU Tool here . If the link breaks, search for \"GD32 MCU Dfu Tool\" at this link . GD32 DFU Drivers here . If the link breaks, search for \"GD32 Dfu Drivers\" at this link . Check properties of both downloads, tick Unblock if needed, then Unzip Install the drivers and the GD32 DFU tool (ignore prompts to update the tool). Enter DFU mode: press and hold ( - ) button at the back of Pinecil (do not release). Connect Pinecil to a PC via USB cable (do not release the ( - ) yet). Screen will stay black/off to indicate the Pinecil is in DFU mode. This is normal. You may hear a beep from Windows as it connects to Pinecil in DFU mode. If you see windows notification that it does not recognize USB device , then you didn't connect, repeat step 3-8. Open the GD32 DFU Tool (ignore prompts to update tool). At the top of the DFU tool, you should see GD DFU DEVICE 1 appear if you successfully connected Pinecil. If DFU Device box at top is blank, then Pinecil is not connected in DFU mode, repeat steps 3-11. If it has been more than 10 seconds since you connected the USB cable, Release the ( - ) button. (don't use Upload from Device section) Select Download to device > Open > Browse to folder you unzipped in step 2. Select the hex file for language. English is Pinecil_EN.hex , tick Verify after download . Click OK at bottom. After a few minutes you will see 0-100%, Download successfully! Click Leave DFU at the top. Disconnect Pinecil cable from PC, plug it into a power supply. Do not need to press any buttons, a new screen should appear. To confirm upgrade, hold the minus ( - ) button down for a few seconds, it then shows new firmware version v2.xx.x....date If you have errors, see Troubleshooting above.","title":"Steps"},{"location":"Flashing/Pinecil%20V2/","text":"Flashing / Upgrading your iron Downloading source file In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below). Main release Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below Bleeding edge / latest For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file). Pinecil V2 The MCU in V2 is Bouffalo BL706 and does not use usb-dfu for flashing as the previous MCU did. The current firmware (2.18) is very fresh and no upgrade is available/needed. When an update is released for V2, then IronOS will also include an update method to follow. Background on the BL706 chipset","title":"Pinecil V2"},{"location":"Flashing/Pinecil%20V2/#flashing-upgrading-your-iron","text":"","title":"Flashing / Upgrading your iron"},{"location":"Flashing/Pinecil%20V2/#downloading-source-file","text":"In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below).","title":"Downloading source file"},{"location":"Flashing/Pinecil%20V2/#main-release","text":"Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below","title":"Main release"},{"location":"Flashing/Pinecil%20V2/#bleeding-edge-latest","text":"For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file).","title":"Bleeding edge / latest"},{"location":"Flashing/Pinecil%20V2/#pinecil-v2","text":"The MCU in V2 is Bouffalo BL706 and does not use usb-dfu for flashing as the previous MCU did. The current firmware (2.18) is very fresh and no upgrade is available/needed. When an update is released for V2, then IronOS will also include an update method to follow. Background on the BL706 chipset","title":"Pinecil V2"},{"location":"Flashing/TS100/","text":"Flashing / Upgrading your iron Downloading source file In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below). Main release Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below Bleeding edge / latest For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file). TS100 This is completely safe, but if it goes wrong just put the .hex file from the official website ( TS100 onto the unit and you're back to the old firmware. Downloads for the .hex files to flash are available on the releases page. The file you want is called TS100.zip. Inside the zip file (make sure to extract the file before flashing with it) will be a file called TS100_{Language-Code}.hex . Officially the bootloader on the devices only works under Windows (use the built-in File Explorer, as alternative file managers or copy handlers like Teracopy will fail). However, users have reported that it does work under Mac, and can be made to work under Linux sometimes . Details over on the wiki page . Hold the button closest to the tip (MHP30 the left button on the back), and plug in the USB to the computer. The unit will appear as a USB drive. (Screen will say DFU on it.) Drag the .hex file onto the USB drive. The unit will disconnect and reconnect. The filename will have changed to end in .RDY or .ERR If it ends with .RDY you're done! Otherwise, something went wrong. If it didn't work the first time, try copying the file again without disconnecting the device, often it will work on the second shot. Disconnect the USB and power up the device. You're good to go. For the more adventurous out there, you can also load this firmware onto the device using an SWD programmer, for easier installation follow the guide at the end of this document. On the bottom of the MCU riser PCB, there are 4 pads for programming. On v2.51A PCB revision USB_D+ is shorted to SWDIO and USB_D- is shorted to SWCLK so debugging works without disassembly (attach while staying in the bootloader). Installing IronOS-dfu is recommended as it allows reliable flashing of binary files with dfu-util . On some newer TS100 units, the SWD pins are wired up to the USB pins, on older ones they are not sadly. Mac sgr1ff1n (Shane) commented in issue 11 that upgrading worked on their Mac as per normal: I just wanted to say that I was able to update the firmware on my ts100 from the stock version to 1.08 found in this repository using my Mac. I simply followed the same steps however through Finder. I have a MacBook Pro (13-inch, Mid 2012) running Sierra 10.12.4 (16E195). Linux While in the past there were reports of unreliable upgrades, the consensus in issue 11 is that things work mostly as expected in Linux. @awigen has contributed a script flash_ts100_linux.sh that works on Ubuntu 16.04 as well as other distros. If you want to do it manually (or if the script does not work for some reason) the general procedure is the same as for Windows, the differences are in the way to mount the unit and copy the firmware. Remember that after flashing, the firmware filename will have changed to end in .RDY or .ERR or .NOT and only .RDY means the flashing was successful! The unit has to be mounted as msdos type (thanks @balrog-kun for having spotted it). You may disable automount, but unmounting the automounted drive and remounting as msdos works fine. You do not need to turn off automounting, but you do need to unmount the device with umount . It is recommended to use an all-caps filename for the firmware, even if successful flashing were done with lower case names. Avoid USB hubs, plug directly in your computer. If it fails, try again several times without unplugging. Just let it remount. Example, to be run as root, once the unit has been plugged in DFU mode and auto-mounted: FW=ts100.hex unset NAME eval $(lsblk -P -p -d --output NAME,MODEL|grep \"DFU[ _]Disk\") [ -z ${NAME+x} ] && exit 1 # Could not find DFU device umount \"$NAME\" mkdir /tmp/mntdfu mount -t msdos \"$NAME\" /tmp/mntdfu cp \"$FW\" \"/tmp/mntdfu/$(basename $FW|tr a-z A-Z)\" sync umount /tmp/mntdfu rmdir /tmp/mntdfu Device will reboot and automount will rerun if not disabled. Check the extension of your firmware, it should be .RDY now. FAQ The file is showing up with the extension .ERR This can occur during the programming process if any of the checks in the bootloader fail. This is often triggered by anti-virus software or using a non-Windows host OS. First, try just copying the file a second time. Attach the iron in DFU mode. Copy the .hex file to the device. The device disconnects and connects with the .ERR file. Copy the same .hex file again \u26d4 DO NOT TRY AND DELETE THE OLD ONE \u26d4 . The device will disconnect and reconnect again. The device should now have the .RDY file. You're done. If this fails and you are on Mac or Linux reading the wiki page about programming can help. There is also a very long issue thread going through all of the different attempts around this too. If you are on Windows, it's often best to try another computer (friends, work, partners etc.). Device randomly disconnects or does not show up in DFU mode Check if the USB cable you are using has the data pins; test it on another device. There are a surprisingly large number of micro-USB cables that are power only . Try other USB ports. Often different USB controllers will interact with the units differently due to design quirks in the Miniware design. Alternative bootloader If you are an advanced user, and you have used usb-dfu tools before, or you would like to learn; there is an alternative bootloader for these irons. This will NOT show up as a USB storage drive, but instead show up using a standard DFU protocol device. You can then use dfu tools or GUIs to upgrade the iron using the .bin files that are posted to the releases page. To install this alternative bootloader, follow the instructions here . Note that this is only recommended for users who know what they are doing. If you don't understand how this works, please don't flash this.","title":"TS100"},{"location":"Flashing/TS100/#flashing-upgrading-your-iron","text":"","title":"Flashing / Upgrading your iron"},{"location":"Flashing/TS100/#downloading-source-file","text":"In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below).","title":"Downloading source file"},{"location":"Flashing/TS100/#main-release","text":"Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below","title":"Main release"},{"location":"Flashing/TS100/#bleeding-edge-latest","text":"For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file).","title":"Bleeding edge / latest"},{"location":"Flashing/TS100/#ts100","text":"This is completely safe, but if it goes wrong just put the .hex file from the official website ( TS100 onto the unit and you're back to the old firmware. Downloads for the .hex files to flash are available on the releases page. The file you want is called TS100.zip. Inside the zip file (make sure to extract the file before flashing with it) will be a file called TS100_{Language-Code}.hex . Officially the bootloader on the devices only works under Windows (use the built-in File Explorer, as alternative file managers or copy handlers like Teracopy will fail). However, users have reported that it does work under Mac, and can be made to work under Linux sometimes . Details over on the wiki page . Hold the button closest to the tip (MHP30 the left button on the back), and plug in the USB to the computer. The unit will appear as a USB drive. (Screen will say DFU on it.) Drag the .hex file onto the USB drive. The unit will disconnect and reconnect. The filename will have changed to end in .RDY or .ERR If it ends with .RDY you're done! Otherwise, something went wrong. If it didn't work the first time, try copying the file again without disconnecting the device, often it will work on the second shot. Disconnect the USB and power up the device. You're good to go. For the more adventurous out there, you can also load this firmware onto the device using an SWD programmer, for easier installation follow the guide at the end of this document. On the bottom of the MCU riser PCB, there are 4 pads for programming. On v2.51A PCB revision USB_D+ is shorted to SWDIO and USB_D- is shorted to SWCLK so debugging works without disassembly (attach while staying in the bootloader). Installing IronOS-dfu is recommended as it allows reliable flashing of binary files with dfu-util . On some newer TS100 units, the SWD pins are wired up to the USB pins, on older ones they are not sadly.","title":"TS100"},{"location":"Flashing/TS100/#mac","text":"sgr1ff1n (Shane) commented in issue 11 that upgrading worked on their Mac as per normal: I just wanted to say that I was able to update the firmware on my ts100 from the stock version to 1.08 found in this repository using my Mac. I simply followed the same steps however through Finder. I have a MacBook Pro (13-inch, Mid 2012) running Sierra 10.12.4 (16E195).","title":"Mac"},{"location":"Flashing/TS100/#linux","text":"While in the past there were reports of unreliable upgrades, the consensus in issue 11 is that things work mostly as expected in Linux. @awigen has contributed a script flash_ts100_linux.sh that works on Ubuntu 16.04 as well as other distros. If you want to do it manually (or if the script does not work for some reason) the general procedure is the same as for Windows, the differences are in the way to mount the unit and copy the firmware. Remember that after flashing, the firmware filename will have changed to end in .RDY or .ERR or .NOT and only .RDY means the flashing was successful! The unit has to be mounted as msdos type (thanks @balrog-kun for having spotted it). You may disable automount, but unmounting the automounted drive and remounting as msdos works fine. You do not need to turn off automounting, but you do need to unmount the device with umount . It is recommended to use an all-caps filename for the firmware, even if successful flashing were done with lower case names. Avoid USB hubs, plug directly in your computer. If it fails, try again several times without unplugging. Just let it remount. Example, to be run as root, once the unit has been plugged in DFU mode and auto-mounted: FW=ts100.hex unset NAME eval $(lsblk -P -p -d --output NAME,MODEL|grep \"DFU[ _]Disk\") [ -z ${NAME+x} ] && exit 1 # Could not find DFU device umount \"$NAME\" mkdir /tmp/mntdfu mount -t msdos \"$NAME\" /tmp/mntdfu cp \"$FW\" \"/tmp/mntdfu/$(basename $FW|tr a-z A-Z)\" sync umount /tmp/mntdfu rmdir /tmp/mntdfu Device will reboot and automount will rerun if not disabled. Check the extension of your firmware, it should be .RDY now.","title":"Linux"},{"location":"Flashing/TS100/#faq","text":"","title":"FAQ"},{"location":"Flashing/TS100/#the-file-is-showing-up-with-the-extension-err","text":"This can occur during the programming process if any of the checks in the bootloader fail. This is often triggered by anti-virus software or using a non-Windows host OS. First, try just copying the file a second time. Attach the iron in DFU mode. Copy the .hex file to the device. The device disconnects and connects with the .ERR file. Copy the same .hex file again \u26d4 DO NOT TRY AND DELETE THE OLD ONE \u26d4 . The device will disconnect and reconnect again. The device should now have the .RDY file. You're done. If this fails and you are on Mac or Linux reading the wiki page about programming can help. There is also a very long issue thread going through all of the different attempts around this too. If you are on Windows, it's often best to try another computer (friends, work, partners etc.).","title":"The file is showing up with the extension .ERR"},{"location":"Flashing/TS100/#device-randomly-disconnects-or-does-not-show-up-in-dfu-mode","text":"Check if the USB cable you are using has the data pins; test it on another device. There are a surprisingly large number of micro-USB cables that are power only . Try other USB ports. Often different USB controllers will interact with the units differently due to design quirks in the Miniware design.","title":"Device randomly disconnects or does not show up in DFU mode"},{"location":"Flashing/TS100/#alternative-bootloader","text":"If you are an advanced user, and you have used usb-dfu tools before, or you would like to learn; there is an alternative bootloader for these irons. This will NOT show up as a USB storage drive, but instead show up using a standard DFU protocol device. You can then use dfu tools or GUIs to upgrade the iron using the .bin files that are posted to the releases page. To install this alternative bootloader, follow the instructions here . Note that this is only recommended for users who know what they are doing. If you don't understand how this works, please don't flash this.","title":"Alternative bootloader"},{"location":"Flashing/TS80%28P%29/","text":"Flashing / Upgrading your iron Downloading source file In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below). Main release Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below Bleeding edge / latest For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file). TS80 / TS80P This is completely safe, but if it goes wrong just put the .hex file from the official website ( TS80 / TS80P onto the unit and you're back to the old firmware. Downloads for the .hex files to flash are available on the releases page. The file you want is called TS80.zip or TS80P.zip. Inside the zip file (make sure to extract the file before flashing with it) will be a file called TS80_{Language-Code}.hex / TS80P_{Language-Code}.hex . Officially the bootloader on the devices only works under Windows (use the built-in File Explorer, as alternative file managers or copy handlers like Teracopy will fail). However, users have reported that it does work under Mac, and can be made to work under Linux sometimes . Details over on the wiki page . Hold the button closest to the tip (MHP30 the left button on the back), and plug in the USB to the computer. The unit will appear as a USB drive. (Screen will say DFU on it.) Drag the .hex file onto the USB drive. The unit will disconnect and reconnect. The filename will have changed to end in .RDY or .ERR If it ends with .RDY you're done! Otherwise, something went wrong. If it didn't work the first time, try copying the file again without disconnecting the device, often it will work on the second shot. Disconnect the USB and power up the device. You're good to go. For the more adventurous out there, you can also load this firmware onto the device using an SWD programmer, for easier installation follow the guide at the end of this document. On the USB port, USB_D+ is shorted to SWDIO and USB_D- is shorted to SWCLK so debugging works without disassembly (attach while staying in the bootloader). Installing IronOS-dfu is recommended as it allows reliable flashing of binary files with dfu-util . Mac sgr1ff1n (Shane) commented in issue 11 that upgrading worked on their Mac as per normal: I just wanted to say that I was able to update the firmware on my TS100 from the stock version to 1.08 found in this repository using my Mac. I simply followed the same steps however through Finder. I have a MacBook Pro (13-inch, Mid 2012) running Sierra 10.12.4 (16E195). Linux While in the past there were reports of unreliable upgrades, the consensus in issue 11 is that things work mostly as expected in Linux. @awigen has contributed a script flash_TS100_linux.sh that works on Ubuntu 16.04 as well as other distros. If you want to do it manually (or if the script does not work for some reason) the general procedure is the same as for Windows, the differences are in the way to mount the unit and copy the firmware. Remember that after flashing, the firmware filename will have changed to end in .RDY or .ERR or .NOT and only .RDY means the flashing was successful! The unit has to be mounted as msdos type (thanks @balrog-kun for having spotted it). You may disable automount, but unmounting the automounted drive and remounting as msdos works fine. You do not need to turn off automounting, but you do need to unmount the device with umount . It is recommended to use an all-caps filename for the firmware, even if successful flashing were done with lower case names. Avoid USB hubs, plug directly in your computer. If it fails, try again several times without unplugging. Just let it remount. Example, to be run as root, once the unit has been plugged in DFU mode and auto-mounted: FW=TS80.hex unset NAME eval $(lsblk -P -p -d --output NAME,MODEL|grep \"DFU[ _]Disk\") [ -z ${NAME+x} ] && exit 1 # Could not find DFU device umount \"$NAME\" mkdir /tmp/mntdfu mount -t msdos \"$NAME\" /tmp/mntdfu cp \"$FW\" \"/tmp/mntdfu/$(basename $FW|tr a-z A-Z)\" sync umount /tmp/mntdfu rmdir /tmp/mntdfu Device will reboot and automount will rerun if not disabled. Check the extension of your firmware, it should be .RDY now. FAQ The file is showing up with the extension .ERR This can occur during the programming process if any of the checks in the bootloader fail. This is often triggered by anti-virus software or using a non-Windows host OS. First, try just copying the file a second time. Attach the iron in DFU mode. Copy the .hex file to the device. The device disconnects and connects with the .ERR file. Copy the same .hex file again \u26d4 DO NOT TRY AND DELETE THE OLD ONE \u26d4 . The device will disconnect and reconnect again. The device should now have the .RDY file. You're done. If this fails and you are on Mac or Linux reading the wiki page about programming can help. There is also a very long issue thread going through all of the different attempts around this too. If you are on Windows, it's often best to try another computer (friends, work, partners etc.). Device randomly disconnects or does not show up in DFU mode Check if the USB cable you are using has the data pins; test it on another device. There are a surprisingly large number of micro-USB cables that are power only . Try other USB ports. Often different USB controllers will interact with the units differently due to design quirks in the Miniware design. Alternative bootloader If you are an advanced user, and you have used usb-dfu tools before, or you would like to learn; there is an alternative bootloader for these irons. This will NOT show up as a USB storage drive, but instead show up using a standard DFU protocol device. You can then use dfu tools or GUIs to upgrade the iron using the .bin files that are posted to the releases page. To install this alternative bootloader, follow the instructions here . Note that this is only recommended for users who know what they are doing. If you don't understand how this works, please don't flash this.","title":"TS80(P)"},{"location":"Flashing/TS80%28P%29/#flashing-upgrading-your-iron","text":"","title":"Flashing / Upgrading your iron"},{"location":"Flashing/TS80%28P%29/#downloading-source-file","text":"In the development of this firmware, there are three types of firmware released. These are the \"Main\" stable releases, which generally have high confidence in being bug free. Release candidates are released slightly more often, and these are generally perfectly fine for everyday use. These are released early to allow for translation checking and for wonderful people to help spot bugs and regressions. Finally, there are the \"mainline\" builds, which are built from the main git branch. These are built on every change and can be found on the Actions tab (see below).","title":"Downloading source file"},{"location":"Flashing/TS80%28P%29/#main-release","text":"Main releases are made to the releases page . Download the zip file that matches your model of soldering iron and extract it. Select the appropriate file type for your unit, in general Miniware devices need .hex and Pinecil needs .dfu . Flash according to details below","title":"Main release"},{"location":"Flashing/TS80%28P%29/#bleeding-edge-latest","text":"For the latest code, you will need to download the zip file from the artifacts page on the build for what you want. Head to the Actions page and then select the run for the appropriate branch you would like. In general you probably want master . Once you click on a run, scroll down to the \"Artifacts\" section and then click on your model to download a zip file. Then this works the same as a production release (use the correct file).","title":"Bleeding edge / latest"},{"location":"Flashing/TS80%28P%29/#ts80-ts80p","text":"This is completely safe, but if it goes wrong just put the .hex file from the official website ( TS80 / TS80P onto the unit and you're back to the old firmware. Downloads for the .hex files to flash are available on the releases page. The file you want is called TS80.zip or TS80P.zip. Inside the zip file (make sure to extract the file before flashing with it) will be a file called TS80_{Language-Code}.hex / TS80P_{Language-Code}.hex . Officially the bootloader on the devices only works under Windows (use the built-in File Explorer, as alternative file managers or copy handlers like Teracopy will fail). However, users have reported that it does work under Mac, and can be made to work under Linux sometimes . Details over on the wiki page . Hold the button closest to the tip (MHP30 the left button on the back), and plug in the USB to the computer. The unit will appear as a USB drive. (Screen will say DFU on it.) Drag the .hex file onto the USB drive. The unit will disconnect and reconnect. The filename will have changed to end in .RDY or .ERR If it ends with .RDY you're done! Otherwise, something went wrong. If it didn't work the first time, try copying the file again without disconnecting the device, often it will work on the second shot. Disconnect the USB and power up the device. You're good to go. For the more adventurous out there, you can also load this firmware onto the device using an SWD programmer, for easier installation follow the guide at the end of this document. On the USB port, USB_D+ is shorted to SWDIO and USB_D- is shorted to SWCLK so debugging works without disassembly (attach while staying in the bootloader). Installing IronOS-dfu is recommended as it allows reliable flashing of binary files with dfu-util .","title":"TS80 / TS80P"},{"location":"Flashing/TS80%28P%29/#mac","text":"sgr1ff1n (Shane) commented in issue 11 that upgrading worked on their Mac as per normal: I just wanted to say that I was able to update the firmware on my TS100 from the stock version to 1.08 found in this repository using my Mac. I simply followed the same steps however through Finder. I have a MacBook Pro (13-inch, Mid 2012) running Sierra 10.12.4 (16E195).","title":"Mac"},{"location":"Flashing/TS80%28P%29/#linux","text":"While in the past there were reports of unreliable upgrades, the consensus in issue 11 is that things work mostly as expected in Linux. @awigen has contributed a script flash_TS100_linux.sh that works on Ubuntu 16.04 as well as other distros. If you want to do it manually (or if the script does not work for some reason) the general procedure is the same as for Windows, the differences are in the way to mount the unit and copy the firmware. Remember that after flashing, the firmware filename will have changed to end in .RDY or .ERR or .NOT and only .RDY means the flashing was successful! The unit has to be mounted as msdos type (thanks @balrog-kun for having spotted it). You may disable automount, but unmounting the automounted drive and remounting as msdos works fine. You do not need to turn off automounting, but you do need to unmount the device with umount . It is recommended to use an all-caps filename for the firmware, even if successful flashing were done with lower case names. Avoid USB hubs, plug directly in your computer. If it fails, try again several times without unplugging. Just let it remount. Example, to be run as root, once the unit has been plugged in DFU mode and auto-mounted: FW=TS80.hex unset NAME eval $(lsblk -P -p -d --output NAME,MODEL|grep \"DFU[ _]Disk\") [ -z ${NAME+x} ] && exit 1 # Could not find DFU device umount \"$NAME\" mkdir /tmp/mntdfu mount -t msdos \"$NAME\" /tmp/mntdfu cp \"$FW\" \"/tmp/mntdfu/$(basename $FW|tr a-z A-Z)\" sync umount /tmp/mntdfu rmdir /tmp/mntdfu Device will reboot and automount will rerun if not disabled. Check the extension of your firmware, it should be .RDY now.","title":"Linux"},{"location":"Flashing/TS80%28P%29/#faq","text":"","title":"FAQ"},{"location":"Flashing/TS80%28P%29/#the-file-is-showing-up-with-the-extension-err","text":"This can occur during the programming process if any of the checks in the bootloader fail. This is often triggered by anti-virus software or using a non-Windows host OS. First, try just copying the file a second time. Attach the iron in DFU mode. Copy the .hex file to the device. The device disconnects and connects with the .ERR file. Copy the same .hex file again \u26d4 DO NOT TRY AND DELETE THE OLD ONE \u26d4 . The device will disconnect and reconnect again. The device should now have the .RDY file. You're done. If this fails and you are on Mac or Linux reading the wiki page about programming can help. There is also a very long issue thread going through all of the different attempts around this too. If you are on Windows, it's often best to try another computer (friends, work, partners etc.).","title":"The file is showing up with the extension .ERR"},{"location":"Flashing/TS80%28P%29/#device-randomly-disconnects-or-does-not-show-up-in-dfu-mode","text":"Check if the USB cable you are using has the data pins; test it on another device. There are a surprisingly large number of micro-USB cables that are power only . Try other USB ports. Often different USB controllers will interact with the units differently due to design quirks in the Miniware design.","title":"Device randomly disconnects or does not show up in DFU mode"},{"location":"Flashing/TS80%28P%29/#alternative-bootloader","text":"If you are an advanced user, and you have used usb-dfu tools before, or you would like to learn; there is an alternative bootloader for these irons. This will NOT show up as a USB storage drive, but instead show up using a standard DFU protocol device. You can then use dfu tools or GUIs to upgrade the iron using the .bin files that are posted to the releases page. To install this alternative bootloader, follow the instructions here . Note that this is only recommended for users who know what they are doing. If you don't understand how this works, please don't flash this.","title":"Alternative bootloader"}]}